// Ionic Starter App
(function() {
  'use strict';

  angular.module('app', [
    'ionic',
    'ngCordova',
    'ngResource',
    'ngTemplates',
    'ngStorage',
    'ngFileUpload',
    'ngTagsInput',
  ])

  .run([

    '$ionicPlatform', '$rootScope', '$stateParams', '$state', 'AuthService', '$window', '$ionicHistory', '$ionicSideMenuDelegate', 'Message', '$timeout', 'appStorage', '$ionicModal',

    function($ionicPlatform, $rootScope, $stateParams, $state, AuthService, $window, $ionicHistory, $ionicSideMenuDelegate, Message, $timeout, appStorage, $ionicModal) {

      $rootScope.isState = isState;
      $rootScope.areStates = areStates;
      $rootScope.getState = getState;
      $rootScope.isParam = isParam;
      $rootScope.getParam = getParam;
      $rootScope.goToState = goToState;
      $rootScope.toggleSideMenu = toggleSideMenu;
      $rootScope.loading = loading;
      $rootScope.goBack = goBack;
      $rootScope.closeSideMenu = closeSideMenu;
      $rootScope.appStorage = appStorage;
      $rootScope.$state = $state;
      $rootScope.$stateParams = $stateParams;
      $rootScope.mainType = null;

      $ionicPlatform.ready(onReady);

      //====================================================
      //  IMPLEMENTATIONS
      //====================================================
      // DEPRECATED use $state.is('state.name', {param1: param1, param2: param2})
      function isState(state) {
        return state === $ionicHistory.currentStateName();
      }

      function areStates(states) {
        return states.indexOf($ionicHistory.currentStateName()) !== -1;
      }

      function getState() {
        return $ionicHistory.currentStateName();
      }

      // DEPRECATED use ui-sref="main.home({param1: param1, param2: param2})"
      function goToState(state, params) {
        $ionicSideMenuDelegate.toggleLeft(false);
        $state.go(state, params);
      }

      function isParam(paramObj) {
        for (var key in paramObj) {
          if ($stateParams[key] !== paramObj[key]) {
            return false;
          }
        }
        return true;
      }

      function getParam(key) {
        return $stateParams[key];
      }
      //====================================================
      //  Global scope should not do this on global...
      //====================================================
      $ionicModal.fromTemplateUrl('state/modal/requestEditProfile.html', {
        scope: $rootScope,
        animation: 'mh-slide'
      }).then(function(modal) {
        $rootScope.requestEditProfileModal = modal;
      });

      $rootScope.handleCloseEditProfileModal = function() {
        if (!appStorage.token) {
          $rootScope.requestEditProfileModal.hide();
          $state.go('main.login');
          closeSideMenu();
        } else if (appStorage.token) {
          $rootScope.requestEditProfileModal.hide();
          $state.go('main.profile');
          closeSideMenu();
        }
      };

      function toggleSideMenu() {
        if (!appStorage.user) {
          appStorage.user = {};
        }
        if (!appStorage.user.profile_picture || !appStorage.user.nickname || !appStorage.user.phone) {
          $rootScope.requestEditProfileModal.show();
        }
        $ionicSideMenuDelegate.toggleLeft();
      }

      function closeSideMenu() {
        $ionicSideMenuDelegate.toggleLeft(false);
      }

      function loading() {
        Message.loading();
        $timeout(function() {
          Message.hide();
        }, 2000);
      }

      function goBack() {
        $ionicHistory.goBack();
      }

      function onReady() {
        if ($window.cordova && $window.cordova.plugins.Keyboard) {
          $window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
          $state.go('main.home');
        }
        if ($window.StatusBar) {
          $window.StatusBar.styleDefault();
        }
        $ionicPlatform.registerBackButtonAction(function(e) {
          e.preventDefault();
          if (areStates(['main.home'])) {
            return ionic.Platform.exitApp();
          }
          if (areStates(['main.postList'])) {
            if ($stateParams.category) {
              return $state.go('main.postList', {
                type: $stateParams.type,
                category: null
              });
            } else {
              return $state.go('main.home');
            }
          }
          if (areStates(['main.announcement.list', 'main.boardList.category'])) {
            return $state.go('main.home');
          }
          if (areStates(['main.postDetail'])) {
            if ($stateParams.prev === 'main.daumMap') {
              return $state.go('main.daumMap', {
                id: $stateParams.id
              });
            }
          }
          if (areStates(['main.favorite.saved'])) {
            return $state.go('main.postList', {
              type: 'local'
            });
          }
          $ionicHistory.goBack();
        }, 101);
      }


      $state.go('main.home');

    }
  ])

  .config([

    '$stateProvider', '$httpProvider',

    function($stateProvider, $httpProvider) {

      $httpProvider.interceptors.push('AuthInterceptor');

      $stateProvider

      .state('main', {
        url: '/main',
        templateUrl: 'state/0main/main.html',
        controller: 'MainController as Main'
      })

      .state('main.daumMap', {
        url: '/daumMap/:id/:findMe',
        views: {
          main: {
            templateUrl: 'state/daumMap/daumMap.html',
            controller: 'DaumMapController as Map'
          }
        }
      })

      .state('main.signup', {
        url: '/signup',
        views: {
          main: {
            templateUrl: 'state/signup/signup.html',
            controller: 'SignupController as Signup'
          }
        }
      })

      .state('main.login', {
        url: '/login',
        views: {
          main: {
            templateUrl: 'state/login/login.html',
            controller: 'LoginController as Login'
          }
        }
      })

      .state('main.profile', {
        url: '/profile',
        views: {
          main: {
            templateUrl: 'state/profile/profile.html',
            controller: 'ProfileController as Profile'
          }
        }
      })

      .state('main.favorite', {
        url: '/favorite',
        views: {
          main: {
            templateUrl: 'state/favorite/favorite.html',
            controller: 'FavoriteController as Favorite'
          }
        }
      })
        .state('main.favorite.saved', {
          url: '/saved/:type/:by',
          views: {
            favorite: {
              templateUrl: 'state/favoriteSaved/saved.html',
              controller: 'SavedController as Saved'
            }
          }
        })

      .state('main.home', {
        url: '/home',
        views: {
          main: {
            templateUrl: 'state/home/home.html',
            controller: 'HomeController as Home'
          }
        }
      })

      .state('main.postList', {
        url: '/postList/:type/:category',
        views: {
          main: {
            templateUrl: 'state/postList/postList.html',
            controller: 'PostListController as PostList'
          }
        }
      })

      .state('main.postDetail', {
        url: '/postDetail/:type/:id/:prev',
        views: {
          main: {
            templateUrl: 'state/postDetail/postDetail.html',
            controller: 'PostDetailController as PostDetail'
          }
        }
      })

      .state('main.postRegister', {
        url: '/postRegister/:type/:method/:id',
        views: {
          main: {
            templateUrl: 'state/postRegister/postRegister.html',
            controller: 'PostRegisterController as PostRegister'
          }
        }
      })

      .state('main.myPostList', {
        url: '/myPostList/:type',
        views: {
          main: {
            templateUrl: 'state/myPostList/myPostList.html',
            controller: 'MyPostListController as MyPostList'
          }
        }
      })

      .state('main.messageList', {
        url: '/messageList',
        views: {
          main: {
            templateUrl: 'state/messageList/messageList.html',
            controller: 'MessageListController as MessageList'
          }
        }
      })

      .state('main.messageDetail', {
        url: '/messageDetail/:from/:nickname',
        views: {
          main: {
            templateUrl: 'state/messageDetail/messageDetail.html',
            controller: 'MessageDetailController as MessageDetail'
          }
        }
      })

      .state('main.boardList', {
        abstract: true,
        url: '/boardList',
        views: {
          main: {
            templateUrl: 'state/boardList/boardList.html',
            controller: 'BoardListController as BoardList'
          }
        }
      })
        .state('main.boardList.category', {
          url: '/category/:by',
          views: {
            boardList: {
              templateUrl: 'state/boardListCategory/category.html',
              controller: 'CategoryController as Category'
            }
          }
        })

      .state('main.announcement', {
        abstract: true,
        url: '/announcement',
        views: {
          main: {
            templateUrl: 'state/announcement/announcement.html',
            controller: 'AnnouncementController as Announcement'
          }
        }
      })
        .state('main.announcement.list', {
          url: '/list/:by',
          views: {
            announcement: {
              templateUrl: 'state/announcementList/announcementList.html',
              controller: 'AnnouncementListController as AnnouncementList'
            }
          }
        })

      .state('main.announcementDetail', {
        url: '/announcementDetail/:by/:id',
        views: {
          main: {
            templateUrl: 'state/announcementDetail/announcementDetail.html',
            controller: 'AnnouncementDetailController as AnnouncementDetail'
          }
        }
      })

      .state('main.map', {
        url: '/map/:id',
        views: {
          main: {
            templateUrl: 'state/map/map.html',
            controller: 'MapController as Map2'
          }
        }
      })

      .state('main.googleMap', {
        url: '/googleMap/:id',
        views: {
          main: {
            templateUrl: 'state/googleMap/googleMap.html',
          }
        }
      });




    } //END
  ]);
})();

/**
 * Created by Andy on 6/6/2015
 * As part of myfitmate
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Andy Yoon Yong Shin - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Andy Yoon Yong Shin <andy.shin@applicat.co.kr>, 6/6/2015
 *
 */

/**
 * Created by Andy on 5/26/2015
 * As part of beijingtongclient
 *
 * Copyright (C) Applicat (www.applicat.co.kr) & Andy Yoon Yong Shin - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Andy Yoon Yong Shin <andy.shin@applicat.co.kr>, 5/26/2015
 *
 */


/*
 *
 * Constant app config
 *
 */


(function() {
  'use strict';

  angular.module('app')
    .constant("governorUrl", "http://52.68.158.234")
  // .constant("governorUrl", "http://192.168.0.65:1337")
  // .constant("governorUrl", "http://192.168.0.13:1337")
  .constant("appName", "schoolMarket")
    .constant("appId", 3)
    .constant("googlePushSenderID", "350504486209")
    .constant("kakaoKey", "bdb254de02ea0b7521635ba469608674")
    .constant("facebookKey", "442354165953949");

})();

(function() {
  'use strict';
  angular.module('app')
    .value('Schools', [{
      "text": "동양미래대학교"
    }, {
      "text": "명지전문대학"
    }, {
      "text": "배화여자대학교"
    }, {
      "text": "삼육보건대학교"
    }, {
      "text": "서울여자간호대학교"
    }, {
      "text": "서일대학교"
    }, {
      "text": "숭의여자대학교"
    }, {
      "text": "인덕대학교"
    }, {
      "text": "한국폴리텍대학(서울강서캠퍼스)"
    }, {
      "text": "한국폴리텍대학(서울정수캠퍼스)"
    }, {
      "text": "한양여자대학교"
    }, {
      "text": "경남정보대학교"
    }, {
      "text": "경인여자대학교"
    }, {
      "text": "계명문화대학교"
    }, {
      "text": "광주보건대학교"
    }, {
      "text": "기독간호대학교"
    }, {
      "text": "대구공업대학교"
    }, {
      "text": "대구과학대학교"
    }, {
      "text": "대구보건대학교"
    }, {
      "text": "대덕대학교"
    }, {
      "text": "대동대학교"
    }, {
      "text": "대전과학기술대학교"
    }, {
      "text": "대전보건대학교"
    }, {
      "text": "동강대학교"
    }, {
      "text": "동부산대학교"
    }, {
      "text": "동의과학대학교"
    }, {
      "text": "동주대학교"
    }, {
      "text": "부산경상대학교"
    }, {
      "text": "부산과학기술대학교"
    }, {
      "text": "부산여자대학교"
    }, {
      "text": "부산예술대학교"
    }, {
      "text": "서영대학교"
    }, {
      "text": "수성대학교"
    }, {
      "text": "영남이공대학교"
    }, {
      "text": "영진사이버대학"
    }, {
      "text": "영진전문대학"
    }, {
      "text": "우송정보대학"
    }, {
      "text": "울산과학대학교"
    }, {
      "text": "울산과학대학교 (서부캠퍼스)"
    }, {
      "text": "인천재능대학교"
    }, {
      "text": "인하공업전문대학"
    }, {
      "text": "제주관광대학교"
    }, {
      "text": "제주한라대학교"
    }, {
      "text": "조선간호대학교"
    }, {
      "text": "조선이공대학교"
    }, {
      "text": "춘해보건대학교"
    }, {
      "text": "한국영상대학교"
    }, {
      "text": "한국폴리텍대학"
    }, {
      "text": "한국폴리텍대학 (광주2캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (광주캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (남인천캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (달성캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (대구캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (대전캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (동부산캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (부산캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (섬유패션캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (울산캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (인천캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (제주캠퍼스)"
    }, {
      "text": "ICT폴리텍대학"
    }, {
      "text": "경기과학기술대학교"
    }, {
      "text": "경민대학교"
    }, {
      "text": "경복대학교"
    }, {
      "text": "경복대학교 (포천캠퍼스)"
    }, {
      "text": "계원예술대학교"
    }, {
      "text": "국제대학교"
    }, {
      "text": "김포대학교"
    }, {
      "text": "농협대학교"
    }, {
      "text": "대림대학교"
    }, {
      "text": "동남보건대학교"
    }, {
      "text": "동서울대학교"
    }, {
      "text": "동아방송예술대학교"
    }, {
      "text": "동원대학교"
    }, {
      "text": "두원공과대학교"
    }, {
      "text": "두원공과대학교 (파주캠퍼스)"
    }, {
      "text": "부천대학교"
    }, {
      "text": "서영대학교 (파주캠퍼스)"
    }, {
      "text": "서울예술대학교"
    }, {
      "text": "서정대학교"
    }, {
      "text": "수원과학대학교"
    }, {
      "text": "수원여자대학교"
    }, {
      "text": "수원여자대학교 (해란캠퍼스)"
    }, {
      "text": "신구대학교"
    }, {
      "text": "신안산대학교"
    }, {
      "text": "안산대학교"
    }, {
      "text": "여주대학교"
    }, {
      "text": "연성대학교"
    }, {
      "text": "오산대학교"
    }, {
      "text": "용인송담대학교"
    }, {
      "text": "웅지세무대학교"
    }, {
      "text": "유한대학교"
    }, {
      "text": "장안대학교"
    }, {
      "text": "청강문화산업대학교"
    }, {
      "text": "한국관광대학교"
    }, {
      "text": "한국농수산대학"
    }, {
      "text": "한국복지대학교"
    }, {
      "text": "한국폴리텍대학 (성남캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (안성캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (화성캠퍼스)"
    }, {
      "text": "강릉영동대학교"
    }, {
      "text": "강원관광대학교"
    }, {
      "text": "강원도립대학"
    }, {
      "text": "상지영서대학교"
    }, {
      "text": "세경대학교"
    }, {
      "text": "송곡대학교"
    }, {
      "text": "송호대학교"
    }, {
      "text": "한국골프대학교"
    }, {
      "text": "한국폴리텍대학 (강릉캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (원주캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (춘천2캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (춘천캠퍼스)"
    }, {
      "text": "한림성심대학교"
    }, {
      "text": "강동대학교"
    }, {
      "text": "대원대학교"
    }, {
      "text": "백석문화대학교"
    }, {
      "text": "신성대학교"
    }, {
      "text": "아주자동차대학"
    }, {
      "text": "천안연암대학"
    }, {
      "text": "충남도립대학교"
    }, {
      "text": "충북도립대학"
    }, {
      "text": "충북보건과학대학교"
    }, {
      "text": "충청대학교"
    }, {
      "text": "한국영상대학교"
    }, {
      "text": "한국폴리텍대학 (바이오캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (아산캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (청주캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (충주캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (홍성캠퍼스)"
    }, {
      "text": "혜전대학교"
    }, {
      "text": "고구려대학교"
    }, {
      "text": "광양보건대학교"
    }, {
      "text": "군산간호대학교"
    }, {
      "text": "군장대학교"
    }, {
      "text": "동아인재대학교"
    }, {
      "text": "목포과학대학교"
    }, {
      "text": "백제예술대학교"
    }, {
      "text": "서해대학교"
    }, {
      "text": "순천제일대학교"
    }, {
      "text": "원광보건대학교"
    }, {
      "text": "전남과학대학교"
    }, {
      "text": "전남도립대학교"
    }, {
      "text": "전북과학대학교"
    }, {
      "text": "전주기전대학교"
    }, {
      "text": "전주비전대학교"
    }, {
      "text": "청암대학교"
    }, {
      "text": "한국폴리텍대학 (김제캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (목포캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (순천캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (익산캠퍼스)"
    }, {
      "text": "한영대학"
    }, {
      "text": "가톨릭상지대학교"
    }, {
      "text": "거제대학교"
    }, {
      "text": "경남도립거창대학"
    }, {
      "text": "경남도립남해대학"
    }, {
      "text": "경북과학대학교"
    }, {
      "text": "경북도립대학교"
    }, {
      "text": "경북보건대학교"
    }, {
      "text": "경북전문대학교"
    }, {
      "text": "구미대학교"
    }, {
      "text": "김해대학교"
    }, {
      "text": "대경대학교"
    }, {
      "text": "대구미래대학교"
    }, {
      "text": "동원과학기술대학교"
    }, {
      "text": "마산대학교"
    }, {
      "text": "문경대학교"
    }, {
      "text": "서라벌대학교"
    }, {
      "text": "선린대학교"
    }, {
      "text": "성덕대학교"
    }, {
      "text": "안동과학대학교"
    }, {
      "text": "연암공업대학"
    }, {
      "text": "영남외국어대학"
    }, {
      "text": "영진전문대학 (글로벌캠퍼스)"
    }, {
      "text": "진주보건대학교"
    }, {
      "text": "창원문성대학"
    }, {
      "text": "포항대학교"
    }, {
      "text": "한국복지사이버대학"
    }, {
      "text": "한국승강기대학교"
    }, {
      "text": "한국폴리텍대학 (구미캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (영주캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (진주캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (창원캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (포항캠퍼스)"
    }, {
      "text": "한국폴리텍대학 (항공캠퍼스)"
    }, {
      "text": "호산대학교"
    }, {
      "text": "제주관광대학교"
    }, {
      "text": "제주한라대학교"
    }, {
      "text": "한국폴리텍대학 (제주캠퍼스)"
    }, {
      "text": "KC대학교"
    }, {
      "text": "가톨릭대학교 (성신교정)"
    }, {
      "text": "가톨릭대학교 (성의교정)"
    }, {
      "text": "감리교신학대학교"
    }, {
      "text": "건국대학교"
    }, {
      "text": "경기대학교 (서울캠퍼스)"
    }, {
      "text": "경희대학교"
    }, {
      "text": "경희사이버대학교"
    }, {
      "text": "고려대학교"
    }, {
      "text": "고려사이버대학교"
    }, {
      "text": "광운대학교"
    }, {
      "text": "국민대학교"
    }, {
      "text": "덕성여자대학교"
    }, {
      "text": "덕성여자대학교 (종로캠퍼스)"
    }, {
      "text": "동국대학교"
    }, {
      "text": "동덕여자대학교"
    }, {
      "text": "디지털서울문화예술대학교"
    }, {
      "text": "명지대학교"
    }, {
      "text": "사이버한국외국어대학교"
    }, {
      "text": "삼육대학교"
    }, {
      "text": "상명대학교"
    }, {
      "text": "서강대학교"
    }, {
      "text": "서경대학교"
    }, {
      "text": "서울과학기술대학교"
    }, {
      "text": "서울교육대학교"
    }, {
      "text": "서울기독대학교"
    }, {
      "text": "서울대학교"
    }, {
      "text": "서울대학교 (연건캠퍼스)"
    }, {
      "text": "서울디지털대학교"
    }, {
      "text": "서울사이버대학교"
    }, {
      "text": "서울시립대학교"
    }, {
      "text": "서울여자대학교"
    }, {
      "text": "서울여자대학교 (대학로캠퍼스)"
    }, {
      "text": "성공회대학교"
    }, {
      "text": "성균관대학교"
    }, {
      "text": "성신여자대학교"
    }, {
      "text": "성신여자대학교 (미아운정그린캠퍼스)"
    }, {
      "text": "세종대학교"
    }, {
      "text": "세종사이버대학교"
    }, {
      "text": "숙명여자대학교"
    }, {
      "text": "숭실대학교"
    }, {
      "text": "숭실사이버대학교"
    }, {
      "text": "연세대학교"
    }, {
      "text": "열린사이버대학교"
    }, {
      "text": "육군사관학교"
    }, {
      "text": "이화여자대학교"
    }, {
      "text": "인제대학교 (서울캠퍼스)"
    }, {
      "text": "장로회신학대학교"
    }, {
      "text": "중앙대학교"
    }, {
      "text": "총신대학교"
    }, {
      "text": "추계예술대학교"
    }, {
      "text": "한국과학기술원 (서울캠퍼스)"
    }, {
      "text": "한국방송통신대학교"
    }, {
      "text": "한국방송통신대학교 (서울지역대학)"
    }, {
      "text": "한국성서대학교"
    }, {
      "text": "한국예술종합학교"
    }, {
      "text": "한국예술종합학교 (서초동캠퍼스)"
    }, {
      "text": "한국외국어대학교"
    }, {
      "text": "한국체육대학교"
    }, {
      "text": "한성대학교"
    }, {
      "text": "한양대학교"
    }, {
      "text": "한양사이버대학교"
    }, {
      "text": "한영신학대학교"
    }, {
      "text": "홍익대학교"
    }, {
      "text": "UNIST"
    }, {
      "text": "가천대학교 (메디컬캠퍼스)"
    }, {
      "text": "건양대학교대전메디컬캠퍼스"
    }, {
      "text": "건양사이버대학교"
    }, {
      "text": "경북대학교"
    }, {
      "text": "경성대학교"
    }, {
      "text": "경인교육대학교"
    }, {
      "text": "계명대학교"
    }, {
      "text": "계명대학교 (대명캠퍼스)"
    }, {
      "text": "고려대학교 (세종캠퍼스)"
    }, {
      "text": "고신대학교"
    }, {
      "text": "고신대학교 (송도캠퍼스)"
    }, {
      "text": "광신대학교"
    }, {
      "text": "광주과학기술원"
    }, {
      "text": "광주교육대학교"
    }, {
      "text": "광주대학교"
    }, {
      "text": "광주여자대학교"
    }, {
      "text": "국군간호사관학교"
    }, {
      "text": "남부대학교"
    }, {
      "text": "대구가톨릭대학교 (루가캠퍼스)"
    }, {
      "text": "대구가톨릭대학교 (유스티노캠퍼스)"
    }, {
      "text": "대구경북과학기술원"
    }, {
      "text": "대구교육대학교"
    }, {
      "text": "대구대학교 (대명동캠퍼스)"
    }, {
      "text": "대구한의대학교 (수성캠퍼스)"
    }, {
      "text": "대전가톨릭대학교"
    }, {
      "text": "대전대학교"
    }, {
      "text": "대전신학대학교"
    }, {
      "text": "동명대학교"
    }, {
      "text": "동서대학교"
    }, {
      "text": "동아대학교"
    }, {
      "text": "동아대학교 (구덕캠퍼스)"
    }, {
      "text": "동아대학교 (부민캠퍼스)"
    }, {
      "text": "동의대학교"
    }, {
      "text": "동의대학교 (양정캠퍼스)"
    }, {
      "text": "목원대학교"
    }, {
      "text": "배재대학교"
    }, {
      "text": "부경대학교"
    }, {
      "text": "부경대학교 (용당캠퍼스)"
    }, {
      "text": "부산가톨릭대학교"
    }, {
      "text": "부산가톨릭대학교 (메리놀교정)"
    }, {
      "text": "부산가톨릭대학교 (신학교정)"
    }, {
      "text": "부산교육대학교"
    }, {
      "text": "부산대학교"
    }, {
      "text": "부산디지털대학교"
    }, {
      "text": "부산외국어대학교"
    }, {
      "text": "송원대학교"
    }, {
      "text": "신라대학교"
    }, {
      "text": "안양대학교 (강화캠퍼스)"
    }, {
      "text": "연세대학교 (국제캠퍼스)"
    }, {
      "text": "영남대학교 (대구캠퍼스)"
    }, {
      "text": "영산대학교 (해운대캠퍼스)"
    }, {
      "text": "우송대학교"
    }, {
      "text": "울산대학교"
    }, {
      "text": "을지대학교"
    }, {
      "text": "인제대학교 (부산캠퍼스)"
    }, {
      "text": "인천가톨릭대학교"
    }, {
      "text": "인천가톨릭대학교 (송도캠퍼스)"
    }, {
      "text": "인천대학교"
    }, {
      "text": "인천대학교 (미추홀캠퍼스)"
    }, {
      "text": "인천대학교 (제물포캠퍼스)"
    }, {
      "text": "인하대학교"
    }, {
      "text": "전남대학교"
    }, {
      "text": "제주국제대학교"
    }, {
      "text": "제주대학교"
    }, {
      "text": "제주대학교 (사라캠퍼스)"
    }, {
      "text": "조선대학교"
    }, {
      "text": "청운대학교 (인천캠퍼스)"
    }, {
      "text": "충남대학교"
    }, {
      "text": "충남대학교 (보운캠퍼스)"
    }, {
      "text": "침례신학대학교"
    }, {
      "text": "한국과학기술원"
    }, {
      "text": "한국과학기술원 (문지캠퍼스)"
    }, {
      "text": "한국방송통신대학교 (광주전남지역대학)"
    }, {
      "text": "한국방송통신대학교 (대구경북지역대학)"
    }, {
      "text": "한국방송통신대학교 (대전충남지역대학)"
    }, {
      "text": "한국방송통신대학교 (부산지역대학)"
    }, {
      "text": "한국방송통신대학교 (울산지역대학)"
    }, {
      "text": "한국방송통신대학교 (제주지역대학)"
    }, {
      "text": "한국해양대학교"
    }, {
      "text": "한남대학교"
    }, {
      "text": "한밭대학교"
    }, {
      "text": "한밭대학교 (대덕산학융합캠퍼스)"
    }, {
      "text": "호남대학교"
    }, {
      "text": "호남신학대학교"
    }, {
      "text": "홍익대학교 (세종캠퍼스)"
    }, {
      "text": "화신사이버대학교"
    }, {
      "text": "가천대학교"
    }, {
      "text": "가톨릭대학교"
    }, {
      "text": "강남대학교"
    }, {
      "text": "경기대학교"
    }, {
      "text": "경동대학교Metropol캠퍼스"
    }, {
      "text": "경인교육대학교 (경기캠퍼스)"
    }, {
      "text": "경찰대학"
    }, {
      "text": "경희대학교 (국제캠퍼스)"
    }, {
      "text": "국방대학교"
    }, {
      "text": "국제사이버대학교"
    }, {
      "text": "단국대학교"
    }, {
      "text": "대진대학교"
    }, {
      "text": "동국대학교 (바이오메디캠퍼스)"
    }, {
      "text": "루터대학교"
    }, {
      "text": "명지대학교 (자연캠퍼스)"
    }, {
      "text": "서울신학대학교"
    }, {
      "text": "서울장신대학교"
    }, {
      "text": "성결대학교"
    }, {
      "text": "성균관대학교 (자연과학캠퍼스)"
    }, {
      "text": "수원가톨릭대학교"
    }, {
      "text": "수원대학교"
    }, {
      "text": "신경대학교"
    }, {
      "text": "신한대학교"
    }, {
      "text": "신한대학교제2캠퍼스"
    }, {
      "text": "아세아연합신학대학교"
    }, {
      "text": "아주대학교"
    }, {
      "text": "안양대학교"
    }, {
      "text": "예원예술대학교 (양주캠퍼스)"
    }, {
      "text": "용인대학교"
    }, {
      "text": "을지대학교 (성남캠퍼스)"
    }, {
      "text": "중부대학교 (고양캠퍼스)"
    }, {
      "text": "중앙대학교 (안성캠퍼스)"
    }, {
      "text": "중앙승가대학교"
    }, {
      "text": "차의과학대학교"
    }, {
      "text": "총신대학교 (양지캠퍼스)"
    }, {
      "text": "칼빈대학교"
    }, {
      "text": "평택대학교"
    }, {
      "text": "한경대학교"
    }, {
      "text": "한국교통대학교 (의왕캠퍼스)"
    }, {
      "text": "한국산업기술대학교"
    }, {
      "text": "한국외국어대학교 (글로벌캠퍼스)"
    }, {
      "text": "한국항공대학교"
    }, {
      "text": "한세대학교"
    }, {
      "text": "한신대학교"
    }, {
      "text": "한양대학교 (ERICA캠퍼스)"
    }, {
      "text": "협성대학교"
    }, {
      "text": "가톨릭관동대학교"
    }, {
      "text": "강릉원주대학교"
    }, {
      "text": "강릉원주대학교 (원주캠퍼스)"
    }, {
      "text": "강원대학교"
    }, {
      "text": "강원대학교 (도계캠퍼스)"
    }, {
      "text": "강원대학교 (삼척캠퍼스)"
    }, {
      "text": "경동대학교"
    }, {
      "text": "경동대학교Medical캠퍼스 "
    }, {
      "text": "경동대학교설악제2캠퍼스 "
    }, {
      "text": "상지대학교 "
    }, {
      "text": "서울대학교 (평창캠퍼스)"
    }, {
      "text": "연세대학교 (원주캠퍼스)"
    }, {
      "text": "춘천교육대학교"
    }, {
      "text": "한국방송통신대학교 (강원지역대학)"
    }, {
      "text": "한라대학교"
    }, {
      "text": "한림대학교"
    }, {
      "text": "한중대학교"
    }, {
      "text": "건국대학교 (글로컬캠퍼스)"
    }, {
      "text": "건양대학교"
    }, {
      "text": "고신대학교 (세종캠퍼스)"
    }, {
      "text": "고신대학교 (천안캠퍼스)"
    }, {
      "text": "공군사관학교"
    }, {
      "text": "공주교육대학교"
    }, {
      "text": "공주대학교"
    }, {
      "text": "공주대학교 (예산캠퍼스)"
    }, {
      "text": "공주대학교 (천안캠퍼스)"
    }, {
      "text": "극동대학교"
    }, {
      "text": "글로벌사이버대학교"
    }, {
      "text": "금강대학교"
    }, {
      "text": "꽃동네대학교"
    }, {
      "text": "나사렛대학교"
    }, {
      "text": "남서울대학교"
    }, {
      "text": "단국대학교 (천안캠퍼스)"
    }, {
      "text": "대전가톨릭대학교"
    }, {
      "text": "백석대학교"
    }, {
      "text": "상명대학교 (천안캠퍼스)"
    }, {
      "text": "서남대학교 (아산캠퍼스)"
    }, {
      "text": "서원대학교"
    }, {
      "text": "선문대학교"
    }, {
      "text": "선문대학교 (천안캠퍼스)"
    }, {
      "text": "세명대학교"
    }, {
      "text": "세한대학교 (당진캠퍼스)"
    }, {
      "text": "순천향대학교"
    }, {
      "text": "영동대학교"
    }, {
      "text": "우석대학교 (진천캠퍼스)"
    }, {
      "text": "중부대학교"
    }, {
      "text": "중원대학교"
    }, {
      "text": "청운대학교"
    }, {
      "text": "청주교육대학교"
    }, {
      "text": "청주대학교"
    }, {
      "text": "충북대학교"
    }, {
      "text": "한국교원대학교"
    }, {
      "text": "한국교통대학교"
    }, {
      "text": "한국교통대학교 (증평캠퍼스)"
    }, {
      "text": "한국기술교육대학교"
    }, {
      "text": "한국기술교육대학교 (제2캠퍼스)"
    }, {
      "text": "한국방송통신대학교 (충북지역대학)"
    }, {
      "text": "한국전통문화대학교"
    }, {
      "text": "한서대학교"
    }, {
      "text": "한서대학교 (태안캠퍼스)"
    }, {
      "text": "호서대학교"
    }, {
      "text": "호서대학교 (천안캠퍼스)"
    }, {
      "text": "홍익대학교 (세종캠퍼스)"
    }, {
      "text": "광주가톨릭대학교"
    }, {
      "text": "군산대학교"
    }, {
      "text": "동신대학교"
    }, {
      "text": "목포가톨릭대학교"
    }, {
      "text": "목포대학교"
    }, {
      "text": "목포대학교 (목포캠퍼스)"
    }, {
      "text": "목포해양대학교"
    }, {
      "text": "서남대학교"
    }, {
      "text": "세한대학교"
    }, {
      "text": "순천대학교"
    }, {
      "text": "영산선학대학교"
    }, {
      "text": "예수대학교"
    }, {
      "text": "예원예술대학교"
    }, {
      "text": "우석대학교"
    }, {
      "text": "원광대학교"
    }, {
      "text": "원광디지털대학교"
    }, {
      "text": "전남대학교 (여수캠퍼스)"
    }, {
      "text": "전북대학교"
    }, {
      "text": "전북대학교 (고창캠퍼스)"
    }, {
      "text": "전북대학교 (특성화캠퍼스)"
    }, {
      "text": "전주교육대학교"
    }, {
      "text": "전주대학교"
    }, {
      "text": "초당대학교"
    }, {
      "text": "한국방송통신대학교 (전북지역대학)"
    }, {
      "text": "한려대학교"
    }, {
      "text": "한일장신대학교"
    }, {
      "text": "호원대학교"
    }, {
      "text": "가야대학교"
    }, {
      "text": "가야대학교 (고령캠퍼스)"
    }, {
      "text": "경남과학기술대학교"
    }, {
      "text": "경남대학교"
    }, {
      "text": "경북대학교 (상주캠퍼스)"
    }, {
      "text": "경상대학교"
    }, {
      "text": "경상대학교 (칠암캠퍼스)"
    }, {
      "text": "경상대학교 (통영캠퍼스)"
    }, {
      "text": "경운대학교 "
    }, {
      "text": "경일대학교 "
    }, {
      "text": "경주대학교"
    }, {
      "text": "금오공과대학교 "
    }, {
      "text": "김천대학교"
    }, {
      "text": "대구가톨릭대학교 "
    }, {
      "text": "대구대학교"
    }, {
      "text": "대구사이버대학교"
    }, {
      "text": "대구예술대학교"
    }, {
      "text": "대구외국어대학교 "
    }, {
      "text": "대구한의대학교 "
    }, {
      "text": "대구한의대학교 (오성캠퍼스)"
    }, {
      "text": "대신대학교 "
    }, {
      "text": "동국대학교 (경주캠퍼스)"
    }, {
      "text": "동양대학교 "
    }, {
      "text": "부산대학교 (밀양캠퍼스)"
    }, {
      "text": "부산대학교 (양산캠퍼스)"
    }, {
      "text": "부산장신대학교 "
    }, {
      "text": "안동대학교 "
    }, {
      "text": "영남대학교"
    }, {
      "text": "영남신학대학교 "
    }, {
      "text": "영산대학교 "
    }, {
      "text": "위덕대학교"
    }, {
      "text": "육군3사관학교 "
    }, {
      "text": "인제대학교"
    }, {
      "text": "진주교육대학교"
    }, {
      "text": "창신대학교 "
    }, {
      "text": "창원대학교"
    }, {
      "text": "포항공과대학교"
    }, {
      "text": "한국국제대학교"
    }, {
      "text": "한국방송통신대학교 (경남지역대학)"
    }, {
      "text": "한동대학교"
    }, {
      "text": "해군사관학교"
    }, {
      "text": "제주국제대학교"
    }, {
      "text": "제주대학교"
    }, {
      "text": "제주대학교 (사라캠퍼스)"
    }, {
      "text": "한국방송통신대학교 (제주지역대학)"
    }]);
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Bookings', Bookings);

    Bookings.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer'];

    function Bookings($resource, governorUrl, $cordovaFileTransfer) {

        var bookingUrl = governorUrl + '/booking' + '/:list' +
            '/:image' + '/:mine' + '/:dateBetween' + '/:request';

        var params = {
            list: '@list',
            image: '@image',
            mine: '@mine',
            dateBetween: '@dateBetween'
        };

        var actions = {
            getBookings: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyBookings: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            getBookingsDateBetween: {
                method: 'GET',
                params: {
                    dateBetween: 'dateBetween'
                }
            },

            findById: {
                method: 'GET'
            },

            createBooking: {
                method: 'POST'
            },

            requestBooking: {
                method: 'POST',
                params: {
                    request: 'request'
                }
            },
            updateBooking: {
                method: 'PUT',
                isArray: true,
                headers: {
                    'Content-Type': 'text/plain'
                }
            },
            removeBooking: {
                method: 'DELETE'
            }
        };

        var service = $resource(bookingUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        service.createBookingWithImage = function(parameters, booking) {
            angular.extend(booking, parameters);
            var filePath = booking.file;
            delete booking.file;
            var options = {
                params: booking,
                chunkedMode: false
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/booking/image', filePath, options)
            };
        };

        service.updateBookingWithImage = function(parameters, booking) {
            angular.extend(booking, parameters);
            var filePath = booking.file;
            delete booking.file;
            var options = {
                params: booking,
                chunkedMode: false,
                httpMethod: 'PUT'
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/booking/image', filePath, options)
            };

        };

        return service;
    }

    // Booking.get({
    //     list: 'list',
    //     category: 'SHOW-POST'
    // }).$promise
    //     .then(function success() {}, function err() {})

    // Bookings.createBookingWithImage({}, bookingWithFile).$promise
    //     .then(function success() {}, function error() {}, function progress(progress) {})

    // require id in bookingWithFile sails' req.param('id') not only look at url params but
    //also looks at the body of req, it is a sails spcific feature.
    // Bookings.createBookingWithImage({}, bookingWithFile).$promise
    //     .then(function success() {}, function error() {}, function progress(progress) {})

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Comments', Comments);

  Comments.$inject = ['$resource', 'governorUrl'];

  function Comments($resource, governorUrl) {

    var commentUrl = governorUrl + '/:post' + '/:comment' + '/:reply';

    var params = {
      post: '@post',
      comment: '@comment',
      reply: '@reply'
    };

    var actions = {
      addCommentToPost: {
        method: 'POST',
        params: {
          post: 'post',
          comment: 'comment'
        }
      },
      reply: {
        method: 'POST',
        params: {
          comment: 'comment',
          reply: 'reply'
        }
      },
      find: {
        method: 'GET',
        params: {
          comment: 'comment'
        },
        isArray: true
      }
    };

    var service = $resource(commentUrl, params, actions);

    return service;
  }

})();

// TODO: remove pushservice and implement own device/push logic
(function() {
    'use strict';

    angular.module('app')
        .factory('Contacts', Contacts);

    Contacts.$inject = ['$resource', 'governorUrl'];

    function Contacts($resource, governorUrl) {

        var deviceUrl = governorUrl + '/:contact' + '/:admin';

        var params = {
            'contact': '@contact',
            'admin': '@admin'
        };

        var actions = {
            contactAdmin: {
                method: 'POST',
                params: {
                    contact: 'contact',
                    admin: 'admin'
                }
            }
        };

        var service = $resource(deviceUrl, params, actions);

        return service;
    }
})();

// TODO: remove pushservice and implement own device/push logic
(function() {
    'use strict';

    angular.module('app')
        .factory('Devices', Devices);

    Devices.$inject = ['$resource', 'governorUrl', 'PushService'];

    function Devices($resource, governorUrl, PushService) {

        var deviceUrl = governorUrl + '/device' + '/:sendMessageAll';

        var params = {
            sendMessageAll: '@sendMessageAll'
        };

        var actions = {
            pushAll: {
                method: 'GET',
                params: {
                    sendMessageAll: 'sendMessageAll'
                }
            },

            register: {
                method: 'POST',
            },

            update: {
                method: 'PUT'
            }
        };

        var service = $resource(deviceUrl, params, actions);

        service.getDeviceIdSync = function() {
            var deviceId = PushService.getDeviceId();
            return deviceId;
        };

        return service;
    }
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Likes', Likes);

    Likes.$inject = ['$resource', 'governorUrl'];

    function Likes($resource, governorUrl) {

        var likesUrl = governorUrl + '/post' + '/:like' + '/:unlike';

        var params = {
            like: '@like',
            unlike: '@unlike'
        };
        var actions = {
            likePost: {
                method: 'POST'
            },
            unlikePost: {
                method: 'DELETE'
            }
        };

        var service = $resource(likesUrl, params, actions);

        return service;
    }

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Messages', Messages);

  Messages.$inject = ['$resource', 'governorUrl'];

  function Messages($resource, governorUrl) {

    var likesUrl = governorUrl + '/message' + '/:sender' + '/:list';

    var params = {
      sender: '@sender',
      list: '@list',
    };
    var actions = {
      getMyInboxSenderList: {
        method: 'GET',
        params: {
          sender: 'sender',
          list: 'list'
        }
      },

      readMessagesFrom: {
        method: 'GET'
      },

      sendMessage: {
        method: 'POST'
      }
    };

    var service = $resource(likesUrl, params, actions);

    return service;
  }

})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Photos', Photos);

    Photos.$inject = ['$resource', 'governorUrl', 'AuthService', '$cordovaFileTransfer'];

    function Photos($resource, governorUrl, AuthService, $cordovaFileTransfer) {

        var photosUrl = governorUrl + '/photo';

        var params = {};

        var actions = {
            removePhoto: {
                method: 'DELETE'
            }
        };

        var service = $resource(photosUrl, params, actions);

        service.uploadPhoto = function(parameters, post) {
            angular.extend(post, parameters);
            var filePath = post.file ? post.file : '[]';
            delete post.file;
            var options = {
                params: post,
                chunkedMode: false,
                headers: {
                    Connection: "close",
                    Authorization: 'Bearer ' + AuthService.getToken()
                }
            };
            console.log(post);
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/photo', filePath, options, true)
            };
        };

        return service;
    }

})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Places', Places);

    Places.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer'];

    function Places($resource, governorUrl, $cordovaFileTransfer) {

        var placeUrl = governorUrl + '/place' + '/:list' + '/:mine' +
            '/:within' + '/:image' + ':photos';

        var params = {
            list: '@list',
            mine: '@mine',
            within: '@within',
            image: '@image',
            photos: '@photos'
        };

        var actions = {
            getPlaces: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyPlaces: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            getPlacesWithin: {
                method: 'GET',
                params: {
                    list: 'list',
                    within: 'within'
                }
            },
            getPlacePhotos: {
                method: 'GET',
                params: {
                    photos: 'photos'
                },
                isArray: true
            },
            findById: {
                method: 'GET'
            },
            createPlace: {
                method: 'POST'
            },
            createPlaceWithImage: {
                method: 'POST',
                params: {
                    image: 'image'
                }
            },
            updatePlace: {
                method: 'PUT',
                isArray: true

            },
            updateMyPlace: {
                method: 'PUT',
                params: {
                    mine: 'mine'
                },
                isArray: true
            },
            updatePlaceWithImage: {
                method: 'PUT',
                params: {
                    image: 'image'
                }
            },
            removePlace: {
                method: 'DELETE'
            }
        };

        var service = $resource(placeUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        service.createPlaceWithImage = function(parameters, place) {
            angular.extend(place, parameters);
            var filePath = place.file;
            delete place.file;
            var options = {
                params: place,
                chunkedMode: false
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/place/image', filePath, options)
            };
        };

        service.updatePlaceWithImage = function(parameters, place) {
            angular.extend(place, parameters);
            var filePath = place.file;
            delete place.file;
            var options = {
                params: place,
                chunkedMode: false,
                httpMethod: 'PUT'
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/place/image', filePath, options)
            };

        };
        return service;
    }

})();

(function() {
    'use strict';
    angular.module('app')
        .factory('Posts', Posts);

    Posts.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer', 'AuthService'];

    function Posts($resource, governorUrl, $cordovaFileTransfer, AuthService) {

        var postUrl = governorUrl + '/post' + '/:list' +
            '/:image' + '/:mine' + '/:like';

        var params = {
            list: '@list',
            image: '@image',
            mine: '@mine',
            like: '@like'
        };

        var actions = {
            getPosts: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyPosts: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            findById: {
                method: 'GET'
            },
            createPost: {
                method: 'POST'
            },
            updatePost: {
                method: 'PUT'
            },
            likePost: {
                method: 'POST',
                params: {
                    like: 'like'
                }
            },
            removePost: {
                method: 'DELETE'
            }
        };

        var service = $resource(postUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        service.createPostWithImage = function(parameters, post) {
            angular.extend(post, parameters);
            var filePath = post.file ? post.file : '[]';
            delete post.file;
            post.category = "SHOW-POST";
            var options = {
                params: post,
                chunkedMode: false,
                headers: {
                    Connection: "close",
                    Authorization: 'Bearer ' + AuthService.getToken()
                }
            };
            console.log(post);
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/post', filePath, options, true)
            };
        };

        service.updatePostWithImage = function(parameters, post) {
            angular.extend(post, parameters);
            var filePath = post.file;
            delete post.file;
            var options = {
                params: post,
                chunkedMode: false,
                httpMethod: 'PUT',
                headers: {
                    Connection: "close",
                    Authorization: 'Bearer ' + AuthService.getToken()
                }
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/post', filePath, options, true)
            };

        };

        return service;
    }

    // Post.get({
    //     list: 'list',
    //     category: 'SHOW-POST'
    // }).$promise
    //     .then(function success() {}, function err() {})

    // Posts.createPostWithImage({}, postWithFile).$promise
    //     .then(function success() {}, function error() {}, function progress(progress) {})

    // require id in postWithFile sails' req.param('id') not only look at url params but
    //also looks at the body of req, it is a sails spcific feature.
    // Posts.createPostWithImage({}, postWithFile).$promise
    //     .then(function success() {}, function error() {}, function progress(progress) {})


})();

(function() {
  'use strict';
  angular.module('app')
    .factory('Products', Products);

  Products.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer', '_', '$q', 'Upload', 'U'];

  function Products($resource, governorUrl, $cordovaFileTransfer, _, $q, Upload, U) {

    var productUrl = governorUrl + '/product' + '/:list' +
      '/:image' + '/:mine' + '/:checkProductCode' + '/:ids' + '/:comments' + '/:within' + '/:like' + '/:unlike' + '/:setSoldOut' + '/:unsetSoldOut';

    var params = {
      list: '@list',
      image: '@image',
      mine: '@mine',
      checkProductCode: '@checkProductCode',
      ids: '@ids',
      comments: '@comments',
      within: '@within',
      like: '@like',
      unlike: '@unlike',
      setSoldOut: '@setSoldOut',
      unsetSoldOut: '@unsetSoldOut'
    };

    var actions = {

      setSoldOut: {
        method: 'PUT',
        params: {
          setSoldOut: 'setSoldOut'
        }
      },

      unsetSoldOut: {
        method: 'PUT',
        params: {
          unsetSoldOut: 'unsetSoldOut'
        }
      },

      unlike: {
        method: 'PUT',
        params: {
          unlike: 'unlike'
        }
      },

      like: {
        method: 'PUT',
        params: {
          like: 'like'
        }
      },

      getProductWithin: { // longitude, latitude, distance
        method: 'GET',
        params: {
          list: 'list',
          within: 'within'
        }
      },

      getProductsWithComments: {
        method: 'GET',
        params: {
          comments: 'comments'
        },
        isArray: true
      },
      getProductsWithIds: {
        method: 'GET',
        params: {
          ids: 'ids'
        },
        isArray: true
      },
      getProducts: {
        method: 'GET',
        params: {
          list: 'list'
        }
      },
      getMyProducts: {
        method: 'GET',
        params: {
          list: 'list',
          mine: 'mine'
        }
      },
      checkProductCode: {
        method: 'GET',
        params: {
          checkProductCode: 'checkProductCode'
        }
      },
      findById: {
        method: 'GET'
      },
      createProduct: {
        method: 'POST'
      },
      updateProduct: {
        method: 'PUT'
      },
      removeProduct: {
        method: 'DELETE'
      },
      removeProducts: {
        method: 'DELETE',
        isArray: true
      }
    };

    var service = $resource(productUrl, params, actions);

    service.createProductWithImage = createProductWithImage;
    //------------------------
    //  CUSTOM NON-HTTP METHODS
    //------------------------
    function createProductWithImage(params, product) {

      angular.extend(product, params);

      // var fileUri = U.toArray(product.fileUri);
      var dataUri = U.toArray(product.dataUri);
      delete product.fileUri;
      delete product.dataUri;

      var filesToSend = [];
      console.log("---------- dataUri ----------");
      console.log(dataUri);
      console.log("HAS TYPE: " + typeof dataUri);
      console.log("---------- CONSOLE END -------------------");

      angular.forEach(dataUri, function(data) {
        filesToSend.push(U.imageDataToFile(data));
      });

      var promise = Upload.upload({
        url: governorUrl + '/product',
        file: filesToSend,
        method: 'POST',
        fields: product,
        sendFieldsAs: 'json',
        withCredentials: false,
        chunkedMode: false,
        headers: {
          Coonection: 'close'
        }
      });
      return {
        $promise: promise
      };
    } //end createProductWithImage

    return service;









    // service.createProductWithImage = function(params, data) {

    //   angular.extend(data, params);
    //   if (Array.isArray(data.file)) {

    //     var files = data.file;
    //     delete data.file;
    //     var promises = _.map(files, function(uri, i) {
    //       if (i === 0) {
    //         return fileUpload(uri, data);
    //       }
    //       return fileUpload(uri);
    //     });
    //     return {
    //       $promise: $q.all(promises)
    //     };

    //     // Post brand new post with AN image to server
    //     //wait for it to come back with postid
    //     // update post by sending photos.

    //   } else if (!Array.isArray(data.file)) {

    //     var file = data.file;
    //     delete data.file;
    //     var promise = fileUpload(file, data);

    //     return {
    //       $promise: $q.all([promise])
    //     };

    //   }
    // };

    //   service.updateProductWithImage = function(parameters, product) {
    //     angular.extend(product, parameters);
    //     var filePath = product.file;
    //     delete product.file;
    //     var options = {
    //       params: product,
    //       chunkedMode: false,
    //       httpMethod: 'PUT'
    //     };
    //     return {
    //       '$promise': $cordovaFileTransfer.upload(governorUrl + '/product', filePath, options)
    //     };

    //   };

    //   return service;


    //   // Helper function.
    //   // Upload a single file.
    //   function fileUpload(file, data) {
    //     var options = {
    //       chunkedMode: false
    //     };
    //     if (data) {
    //       options.params = data;
    //     }
    //     var promise = $cordovaFileTransfer.upload(governorUrl + '/product', file, options);
    //     return promise;
    //   }
  } //end
})();





// /* Set the default values for ngf-select and ngf-drop directives*/
// Upload.setDefaults({
//   ngfMinSize: 20000,
//   ngfMaxSize: 20000000,
// });

// /* Convert the file to base64 data url*/
// Upload.dataUrl(file, disallowObjectUrl).then(function(url) {});

// /* Get image file dimensions*/
// Upload.imageDimensions(file).then(function(dimensions) {
//   console.log(dimensions.width, dimensions.height);
// });

// /* Get audio/video duration*/
// Upload.mediaDuration(file).then(function(durationInSeconds) {

// });

// /* returns boolean showing if image resize is supported by this browser*/
// Upload.isResizeSupported();
// /* returns boolean showing if resumable upload is supported by this browser*/
// Upload.isResumeSupported();

(function() {
    'use strict';

    angular.module('app')
        .factory('RoyaltyPoints', RoyaltyPoints);

    RoyaltyPoints.$inject = ['$resource', 'governorUrl'];

    function RoyaltyPoints($resource, governorUrl) {

        var royaltyUrl = governorUrl + '/royaltyPoint' + '/:list' + '/:mine';

        var params = {
            list: '@list',
            mine: '@mine'
        };

        var actions = {
            getRoyaltyPoints: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },

            getMyRoyaltyPoints: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },

            findById: {
                method: 'GET'
            },

            createRoyaltyPoint: {
                method: 'POST',
            },

            updateRoyaltyPoint: {
                method: 'PUT',
                isArray: true
            },

            removeRoyaltyPoint: {
                method: 'DELETE'
            }
        };

        var service = $resource(royaltyUrl, params, actions);

        return service;
    }

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Users', Users);


  Users.$inject = ['$resource', 'governorUrl'];

  function Users($resource, governorUrl) {

    var userUrl = governorUrl + '/:auth' + '/:register' + '/:user' + '/:local' +
      '/:checkNickname' + '/:list' + '/:role' + '/:myrole' + '/:update' + '/:updateWithImage';

    var params = {
      auth: '@auth',
      register: '@register',
      user: '@user',
      checkNickname: '@checkNickname',
      list: '@list',
      role: '@role',
      myrole: '@myrole',
      updateWithImage: '@updateWithImage'
    };

    var actions = {
      getUsers: {
        method: 'GET',
        params: {
          user: 'user',
          list: 'list'
        }
      },
      register: {
        method: 'POST',
        params: {
          register: 'register'
        }
      },
      checkNickname: {
        method: 'GET',
        params: {
          user: 'user',
          checkNickname: 'checkNickname'
        }
      },
      login: {
        method: 'POST',
        params: {
          auth: 'auth',
          local: 'local'
        }
      },
      getMyRole: {
        method: 'GET',
        params: {
          role: 'role',
          myrole: 'myrole'
        }
      },
      updateProfileWithImage: {
        method: 'PUT',
        params: {
          user: 'user',
          updateWithImage: 'updateWithImage'
        }
      },
      updateUser: {
        method: 'PUT',
        params: {
          user: 'user',
          update: 'update'
        },
        isArray: true
      }
    };

    var service = $resource(userUrl, params, actions);

    return service;
  }
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('daum', daum);

    daum.$inject = ['$window'];

    function daum($window) {

        return $window.daum;
    }
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('Firebase', Firebase);

  Firebase.$inject = ['$window'];

  function Firebase($window) {
    return $window.Firebase;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('google', google);

  google.$inject = ['$window'];

  function google($window) {

    return $window.google;
  }
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('localStorage', localStorage);

    localStorage.$inject = ['$window'];

    function localStorage($window) {

        return $window.localStorage;
    }
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('moment', moment);

    moment.$inject = ['$window'];

    function moment($window) {

        return $window.moment;
    }
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('_', _);

    _.$inject = ['$window'];

    function _($window) {

        return $window._;
    }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('U', U);

  U.$inject = ['$window'];

  function U($window) {

    var service = {
      toArray: toArray,
      imageDataToFile: imageDataToFile
    };

    return service;

    //====================================================
    //  IMPLEMENTATIONS
    //====================================================
    function toArray(obj) {
      var array = [];
      if (!Array.isArray(obj)) {
        array = [obj];
      } else if (Array.isArray(obj)) {
        array = obj;
      }
      return array;
    }

    function imageDataToFile(imageData) {
      var blob = dataURItoBlob(imageData);
      return blob;
    }

    //====================================================
    //  Helper
    //====================================================
    function dataURItoBlob(dataURI) {
      var byteString;
      var mimestring;

      if (dataURI.split(',')[0].indexOf('base64') !== -1) {
        byteString = $window.atob(dataURI.split(',')[1]);
      } else {
        byteString = $window.decodeURI(dataURI.split(',')[1]);
      }

      mimestring = dataURI.split(',')[0].split(':')[1].split(';')[0];

      var content = [];
      for (var i = 0; i < byteString.length; i++) {
        content[i] = byteString.charCodeAt(i);
      }

      return new $window.Blob([new $window.Uint8Array(content)], {
        type: mimestring
      });
    }
  } // end
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Dependencies
//ngStorage

(function() {
  'use strict';

  angular.module('app')
    .factory('appStorage', appStorage);

  appStorage.$inject = ['$localStorage', 'appName'];

  function appStorage($localStorage, appName) {
    if (!$localStorage[appName]) {
      $localStorage[appName] = {};
    }
    return $localStorage[appName];
  }
})();

(function() {
  'use strict';

  //====================================================
  //  AuthInterceptor
  //====================================================
  angular.module('app')
    .factory('AuthInterceptor', AuthInterceptor);

  AuthInterceptor.$inject = ['appStorage'];

  function AuthInterceptor(appStorage) {

    return {
      request: requestInterceptor
    };

    function requestInterceptor(req) {
      var token = appStorage.token;
      if (token) {
        // req.headers['Content-Type'] = 'application/json';
        req.headers.Authorization = 'Bearer ' + token;
      }
      return req;

    }
  }


  //====================================================
  //  AuthService
  //====================================================
  angular.module('app')
    .service("AuthService", AuthService);

  AuthService.$inject = ['appStorage', '$http', '$q', '$location', '$state', 'governorUrl', 'LocalService', 'appName', 'kakaoKey', 'facebookKey', '$cordovaOauth', '$window'];

  function AuthService(appStorage, $http, $q, $location, $state, governorUrl, LocalService, appName, kakaoKey, facebookKey, $cordovaOauth, $window) {

    var service = {
      getToken: getToken,
      register: register,
      registerWithImage: registerWithImage,
      login: login,
      verifyResetCode: verifyResetCode,
      passReset: passReset,
      logout: logout,
      changePassword: changePassword,
      checkNickname: checkNickname,
      checkEmail: checkEmail,
      getMyProfile: getMyProfile,
      updateMyProfile: updateMyProfile,
      updateMyProfileWithImage: updateMyProfileWithImage,
      // loginWithKakao: loginWithKakao,
      loginWithFacebook: loginWithFacebook
    };

    return service;

    function getToken() {
      var token = appStorage.token;
      if (token) {
        return token;
      } else {
        $state.go('main.login');
      }
    }

    function register(user) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/register',
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        params: user
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function registerWithImage(user, file, success, fail) {
      var options = new FileUploadOptions();
      var newUser = angular.copy(user);
      options.params = newUser;
      options.headers = {
        Connection: "close"
      };
      options.chunkedMode = false;
      var ft = new FileTransfer();
      ft.upload(file, encodeURI(governorUrl + '/user/registerWithImage'), success, fail, options, true);
    }

    function login(email, password) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/auth/local',
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'identifier': email,
          'password': password
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          appStorage.token = data.token;
          appStorage.user = data.user;
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function verifyResetCode(email, code) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/passwordresetcomplete',
        method: 'put',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'email': email,
          'code': code
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          appStorage.user = data.user;
          appStorage.token = data.token;
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function passReset(email) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/resetStart',
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'email': email
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function logout() {
      appStorage.user = null;
      appStorage.token = null;
    }

    function changePassword(oldPassword, newPassword) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/changePassword',
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'oldPassword': oldPassword,
          'newPassword': newPassword
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function checkNickname(nickname) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/checknickname',
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
        params: {
          nickname: nickname
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function checkEmail(email) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/checkEmail',
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
        params: {
          email: email
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function getMyProfile() {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/profile',
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function updateMyProfile(nickname) {
      var deferred = $q.defer();
      $http({
        url: governorUrl + '/user/update',
        method: 'put',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          nickname: nickname
        }
      })
        .success(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          console.log(status, headers, config);
          deferred.reject(data);
        });
      return deferred.promise;
    }

    function updateMyProfileWithImage(user, file, success, fail) {
      var options = new FileUploadOptions();
      var updateUser = angular.copy(user);
      options.params = updateUser;
      options.httpMethod = 'PUT';
      options.headers = {
        Connection: "close",
        Authorization: 'Bearer ' + appStorage.token
      };
      options.chunkedMode = false;
      var ft = new FileTransfer();
      ft.upload(file, encodeURI(governorUrl + '/user/updateWithImage'), success, fail, options, true);
    }

    // function loginWithKakao() {
    //   var deferred = $q.defer();
    //   if ($window.cordova && $window.cordova.plugins.KakaoLogin) {
    //     $window.cordova.plugins.KakaoLogin.login('login', function(data) {
    //       var result = {};
    //       result.provider = 'kakao';
    //       result.access_token = data;
    //       registerLogin(result);
    //     }, function(error) {
    //       console.log(error);
    //       $cordovaOauth.kakao(kakaoKey).then(function(result) {
    //         result.provider = 'kakao';
    //         registerLogin(result);
    //       }, function(error) {
    //         deferred.reject(error);
    //       });
    //     });
    //   }

    //   function registerLogin(result) {
    //     $http({
    //       url: governorUrl + '/auth/register',
    //       method: 'post',
    //       headers: {
    //         'Content-Type': 'application/json'
    //       },
    //       data: result
    //     })
    //       .success(function(data, status, headers, config) {
    //         console.log(status, headers, config);
    //         appStorage.user = data.user;
    //         appStorage.token = data.token;
    //         deferred.resolve(data);
    //       })
    //       .error(function(data, status, headers, config) {
    //         console.log(data, status, headers, config);
    //         deferred.reject(data);
    //       });
    //   }
    //   return deferred.promise;
    // }

    function loginWithFacebook() {
      var deferred = $q.defer();
      $cordovaOauth.facebook(facebookKey, ["email"]).then(function(result) {
        result.provider = 'facebook';
        console.log('facebook server result');
        console.log(result);
        $http({
          url: governorUrl + '/auth/register',
          method: 'post',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        })
          .success(function(data, status, headers, config) {
            console.log(status, headers, config);
            appStorage.user = data.user;
            appStorage.user.profile_picture = data.user.profile_image;
            appStorage.token = data.token;
            deferred.resolve(data);
          })
          .error(function(data, status, headers, config) {
            console.log(data, status, headers, config);
            deferred.reject(data);
          });
      }, function(error) {
        deferred.reject(error);
      });
      return deferred.promise;
    }
  }
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('DistanceService', DistanceService);

  DistanceService.$inject = [];

  function DistanceService() {

    var service = {
      between: haversine
    };

    return service;

    //====================================================
    // Distance.between Usage
    //====================================================
    //Distance.between({
    //  latitude: 33,
    //  longitude: 33
    //}, {
    //  latitude: 44,
    //  longitude: 44
    //});
    // Output(in meters):
    //20000
    function haversine(p1, p2) {
      var R = 6371;
      var dLat = rad(p2.latitude - p1.latitude);
      var dLong = rad(p2.longitude - p1.longitude);

      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(rad(p1.latitude)) * Math.cos(rad(p2.latitude)) * Math.sin(dLong / 2) * Math.sin(dLong / 2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c;

      var meters = Math.round(d * 1000);
      return meters;
    }

    //====================================================
    //  HELPER
    //====================================================
    function rad(x) {
      return x * Math.PI / 180;
    }

  } // end
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Dom', Dom);

    Dom.$inject = ['$timeout', '$window'];

    function Dom($timeout, $window) {
        var service = {
            focusById: focusById
        };

        return service;

        // USAGE;
        // <input id="daum-map-search-input" type="text">
        // Dom.focusById('daum-map-search-input');
        function focusById(id) {
            $timeout(function() {
                var domElement = $window.document.getElementById(id);
                if (domElement) {
                    domElement.focus();
                }
            });
        }
    }

})();

//====================================================
// createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('FavoriteService', FavoriteService);

  FavoriteService.$inject = ['appStorage', 'Products'];

  function FavoriteService(appStorage, Products) {

    var service = {
      like: like,
      unlike: unlike,
      toggleSaveToFavorite: toggleSaveToFavorite,
      isFavorite: isFavorite
    };

    return service;

    function like(postId) {
      return Products
        .like({
          postId: postId
        }).$promise
        .then(processProduct)
        .catch(error);

      function processProduct(product) {
        console.log(product);
      }

      function error(err) {
        console.log(err);
      }
    }

    function unlike(postId) {
      return Products
        .unlike({
          postId: postId
        }).$promise
        .then(processProduct)
        .catch(error);

      function processProduct(product) {
        console.log(product);
      }

      function error(err) {
        console.log(err);
      }
    }




    //====================================================
    //  FavoriteService.toggleSaveToFavorite
    //====================================================
    // Usage;
    //FavoriteService.toggleFavorite('1asf31sf1adf31')
    // Output(localStorage favorite array);
    //appStorage.favorite
    function toggleSaveToFavorite(id) {
      if (!Array.isArray(appStorage.favorite)) {
        appStorage.favorite = [];
      }
      if (isFavorite(id)) {
        var index = appStorage.favorite.indexOf(id);
        appStorage.favorite.splice(index, 1);
      } else if (!isFavorite(id)) {
        appStorage.favorite.push(id);
      }
      return appStorage.favorite;
    }


    //====================================================
    //  FavoriteService.isFavorite
    //====================================================
    // Usage;
    //FavoriteService.isFavorite('1asf31sf1adf31')
    // Output(boolean if id exists in appStorage.favorite);
    //true || false
    function isFavorite(id) {
      if (!Array.isArray(appStorage.favorite)) {
        appStorage.favorite = [];
      }
      for (var i = 0; i < appStorage.favorite.length; i++) {
        if (String(id) === String(appStorage.favorite[i])) {
          return true;
        }
      }
      return false;
    }

  } // Service END
})();

//  Dependencies
//ng-file-uploead
//cordovaCamera
//cordovaFile
//MessageService
(function() {
  'use strict';

  angular.module('app')
    .factory('ImageService', ImageService);

  ImageService.$inject = ['governorUrl', '$cordovaCamera', '$cordovaFile', 'Message', '$window', '$timeout', 'Upload'];

  function ImageService(governorUrl, $cordovaCamera, $cordovaFile, Message, $window, $timeout, Upload) {

    var service = {
      get: get,
      post: post,
      clean: clean
    };

    return service;

    //====================================================
    //  ImageService.get Usage
    //====================================================
    //ImageService.get({
    //  from: 'camera', // or gallery
    //  fileUris: arrayToSaveFiles,
    //  dataUris: arrayToSaveBase64Data
    //})
    // Output:
    //arrayToSaveFiles.push(filePath);
    //arrayToSaveBase64Data.push(base64Data);
    function get(params) {
      if (!$window.cordova) return false;

      $cordovaCamera.getPicture(setOptions())

      .then(function success(filePath) {
        // Save file path (binary data).
        params.fileUris.push(filePath);
        // Read data(base64) from file path
        var name = filePath.substr(filePath.lastIndexOf('/') + 1);
        var namePath = filePath.substr(0, filePath.lastIndexOf('/') + 1);
        return $cordovaFile.readAsDataURL(namePath, name);
      })

      .then(function success(dataUri) {
        // Save data(base64)
        $timeout(function() {
          params.dataUris.push(dataUri);
        }, 0);
      })

      .catch(function error(err) {
        Message.alert('이미지 알림', '이미지 불러오기 실패하였습니다. 갤러리에서 선택해주세요.');
        console.log(err);
      });

      // .done();

      //  getImage helper
      function setOptions() {
        var sourceType;
        if (params.from === 'gallery') {
          sourceType = 0;
        } else if (params.from === 'camera') {
          sourceType = 1;
        }
        var options = {
          allowEdit: true,
          quality: 40,
          destinationType: Camera.DestinationType.FILE_URI,
          encodingType: Camera.EncodingType.JPEG,
          targetWidth: 500,
          correctOrientation: true,
          mediaType: Camera.MediaType.PICTURE,
          cameraDirection: Camera.Direction.BACK,
          sourceType: sourceType
        };
        return options;
      } // end setOptions
    } // end getImage
    //====================================================
    //  ImageService.post Usage
    //====================================================
    //ImageService.post({
    //  url: '/place'
    //  dataUris: arrayOfBase64Data,
    //  fields: {title: '포스트 이름', content: '냠냠냠', ...}
    //})
    // Output:
    //Promise
    // Output Usage:
    //Promise
    //.then(function success(createdPlaceWrapper){
    //  console.log(createdPlaceWrapper.data);
    //})
    //.catch(function error(err){
    //  throw new Error(err);
    //})
    function post(params, method) {
      var dataUris = params.dataUris;
      var fields = params.fields;
      var url = params.url;
      if (url[0] !== '/') {
        url = '/' + url;
      }
      // Wrap dataUris in array IF it is not an array.
      dataUris = wrapInArray(dataUris);
      // Convert base64 image to file
      var filesToSend = [];
      angular.forEach(dataUris, function(base64Data) {
        filesToSend.push(base64ToFile(base64Data));
      });

      var promise = Upload.upload({
        url: governorUrl + url,
        method: method || 'POST',
        file: filesToSend,
        fields: fields,
        header: {
          enctype: "multipart/form-data"
          // Authoriztion: "Bearer " + appStorage.token
        }
      });
      return promise;
    } //end post

    function clean() {
      return $cordovaCamera.cleanup();
    }

    //====================================================
    //  HELPERS
    //====================================================
    function wrapInArray(obj) {
      var array = [];
      if (!Array.isArray(obj)) {
        array = [obj];
      } else if (Array.isArray(obj)) {
        array = obj;
      }
      return array;
    }

    function base64ToFile(dataUris) {
      var byteString;
      var mimestring;
      if (dataUris.split(',')[0].indexOf('base64') !== -1) {
        byteString = $window.atob(dataUris.split(',')[1]);
      } else {
        byteString = decodeURI(dataUris.split(',')[1]);
      }
      mimestring = dataUris.split(',')[0].split(':')[1].split(';')[0];
      console.log(mimestring);
      var content = [];
      for (var i = 0; i < byteString.length; i++) {
        content[i] = byteString.charCodeAt(i);
      }
      return new $window.Blob([new $window.Uint8Array(content)], {
        type: mimestring
      });
    }
  } // End
})();

//====================================================
//  createBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Dependencies
//Cordova InAppBrowser
//Cordova SocialSharing
(function() {
  'use strict';

  angular.module('app')
    .factory('LinkService', LinkService);

  LinkService.$inject = ['$window', '$cordovaSocialSharing', 'appStorage', 'Message', '$state'];

  function LinkService($window, $cordovaSocialSharing, appStorage, Message, $state) {

    var service = {
      call: call,
      open: open,
      share: share
    };
    return service;

    //====================================================
    //  LinkService.call Usage
    //====================================================
    //LinkService.call(01011010101)
    // Output
    //phone call
    function call(number) {
      if (!appStorage.token) {
        return Message.alert('전화걸기 알림', '로그인을 해주세요.').then(function() {
          $state.go('main.login');
        });
      }
      $window.location.href = 'tel:' + number;
    }

    //====================================================
    //  LinkService.openLink Usage
    //====================================================
    //LinkService.openLink('http://www.applicat.co.kr');
    // Output
    //InAppBrowser open new window with url
    function open(link) {
      return $window.open(link, '_system');
    }

    //====================================================
    //  LinkService.share Usage
    //====================================================
    // LinkService.share('my title', 'my content stuff', 'http://www.applicat.co.kr')
    // Output
    //Social Share title content and link
    function share(title, content, url) {
      return $cordovaSocialSharing
        .share(title, content, null, url)
        .then(function(suc) {
          console.log(suc);
        }, function(err) {
          console.log(err);
        });
    }
  }
})();

(function() {
    'use strict';
    angular.module('app')
        .factory('LocalService', function() {
            return {
                get: function(key) {
                    return localStorage.getItem(key);
                },
                set: function(key, val) {
                    return localStorage.setItem(key, val);
                },
                unset: function(key) {
                    return localStorage.removeItem(key);
                },
                getSession: function(key) {
                    return sessionStorage.getItem(key);
                },
                setSession: function(key, val) {
                    return sessionStorage.setItem(key, val);
                },
                unsetSession: function(key) {
                    return sessionStorage.removeItem(key);
                }
            }
        });


})();

(function() {
  'use strict';
  angular.module('app')
    .factory('Message', Message);

  Message.$inject = ['$ionicLoading', '$ionicPopup'];

  function Message($ionicLoading, $ionicPopup) {
    var service = {
      loading: loadingDefault,
      hide: loadingHide,
      success: messageSuccess,
      error: messageError,
      alert: popUpAlertDefault
    };

    return service;

    function loadingDefault(message) {
      $ionicLoading.show(message);
    }

    function loadingHide() {
      $ionicLoading.hide();
    }

    function messageSuccess(message) {
      $ionicLoading.show({
        template: '<h4 class="message-success">' + message + '</h4>',
        duration: 2000
      });
    }

    function messageError(message) {
      $ionicLoading.show({
        template: '<h4 class="message-error">' + message + '</h4>',
        duration: 2000
      });
    }


    function popUpAlertDefault(title, message) {
      loadingHide();
      return $ionicPopup.alert({
        title: title || '인터넷이 끊겼습니다.',
        template: message || '인터넷을 켜주세요.'
      });
    }


  }


})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MockService', MockService);

  MockService.$inject = [];

  function MockService() {

    var service = {
      generatePosts: generatePosts
    };

    return service;

    //====================================================
    //  IMPLEMENTATIONS
    //====================================================
    function generatePosts(array, numberOfPosts, reset) {
      if (reset) {
        angular.copy([], array);
      }
      for (var i = 1; i <= numberOfPosts; i++) {
        var post = {
          id: i,
          title: '학교장터 ' + i + '번 상품',
          summary: '학교장터 ' + i + '번 상품 정말 좋습니다.',
          content: '학교장터 ' + i + '번 상품은 2014년 12월 ' + i + '일에 완성된 상품이며, 거의 사용하지 않은 상품입니다.',
          photos: [{
            url: 'http://lorempixel.com/100/200/technics/' + i
          }],
          likes: i + 10,
          commentsCount: i,
          comments: [{
            id: 1,
            name: '호도리',
            content: '정말 좋네요'
          }, {
            id: 2,
            name: '호도리',
            content: '정말 좋네요'
          }, {
            id: 3,
            name: '호도리',
            content: '정말 좋네요'
          }, {
            id: 4,
            name: '호도리',
            content: '정말 좋네요'
          }, {
            id: 5,
            name: '호도리',
            content: '정말 좋네요'
          }],
          category: '기타',
          price: 10000 + i * 1000,
          address: '중국 베이징 스징고라리고 고릴라 왕'
        };
        array.push(post);
      }
    }
  }
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Description: Extends $rootScope with custom functions;

// Usage;
// In app.js
// .run(['$rootScope', 'rootScopeService', function ($rootScope, rootScopeService){
//   angular.extend($rootScope, rootScopeService);
// }])
(function() {
  'use strict';

  angular.module('app')
    .factory('rootScopeService', rootScopeService);

  rootScopeService.$inject = ['$state', '$stateParams', '$ionicHistory', '$ionicSideMenuDelegate', 'Message', '$timeout', 'appStorage'];

  function rootScopeService($state, $stateParams, $ionicHistory, $ionicSideMenuDelegate, Message, $timeout, appStorage) {
    var service = {
      appStorage: appStorage,
      $state: $state,
      $stateParams: $stateParams,
      isParam: isParam,
      getParam: getParam,
      isState: isState,
      goToState: goToState,
      goBack: goBack,
      loading: loading,
      toggleSideMenu: toggleSideMenu,
      closeSideMenu: closeSideMenu,
    };

    return service;

    //====================================================
    //  $rootScope.isParam({id: '123', category: ''}) >> true | false
    //====================================================
    function isParam(paramObj) {
      for (var key in paramObj) {
        if ($stateParams[key] !== paramObj[key]) {
          return false;
        }
      }
      return true;
    }
    //====================================================
    // $rootScope.getParam(category)  >> $stateParams[category]
    //====================================================
    function getParam(key) {
      return $stateParams[key];
    }
    //====================================================
    //  $rootScope.isState('main.home') >> true | false
    //====================================================
    function isState(state) {
      return state === $ionicHistory.currentStateName();
    }
    //====================================================
    //  $rootScope.goToState('main.home', {category: 'apple', theme: 'drink'})
    //====================================================
    function goToState(state, params) {
      $ionicSideMenuDelegate.toggleLeft(false);
      $state.go(state, params);
    }
    //====================================================
    //  $rootScope.goBack();
    //====================================================
    function goBack() {
      $ionicHistory.goBack();
    }
    //====================================================
    //  $rootScope.loading();
    //====================================================
    function loading() {
      Message.loading();
      $timeout(function() {
        Message.hide();
      }, 2000);
    }
    //====================================================
    //  $rootScope.closeSideMenu();
    //====================================================
    function closeSideMenu() {
      $ionicSideMenuDelegate.toggleLeft(false);
    }
    //====================================================
    //  $rootScope.toggleSideMenu();
    //====================================================
    function toggleSideMenu() {
      $ionicSideMenuDelegate.toggleLeft();
    }
  } //end
})();

// Fixes the case where parent veritcal scrolling(eg ion-content scroll) is disabled on area where ion-scroll is located.

// Usage
// ion-scroll[direction="x" parent-scroll]
(function() {
  'use strict';

  angular.module('app')
    .directive('parentScroll', parentScroll);

  parentScroll.$inject = ['$ionicScrollDelegate', '$timeout', '$window', '$document'];

  function parentScroll($ionicScrollDelegate, $timeout, $window, $document) {
    return {
      scope: true,
      restrict: 'A',
      compile: compile
    };

    function compile(element, attr) {

      if (!$window.horizontalIonScrollCount) {
        $window.horizontalIonScrollCount = 0;
      }

      $window.horizontalIonScrollCount++;
      attr.delegateHandle = "horizontal" + $window.horizontalIonScrollCount;

      return function(scope, element, attr) {
        $timeout(function() {
          var horizontal = attr.delegateHandle;
          var sv = $ionicScrollDelegate.$getByHandle(horizontal).getScrollView();

          var container = sv.__container;

          var originaltouchStart = sv.touchStart;
          var originalmouseDown = sv.mouseDown;
          var originaltouchMove = sv.touchMove;
          var originalmouseMove = sv.mouseMove;

          container.removeEventListener('touchstart', sv.touchStart);
          container.removeEventListener('mousedown', sv.mouseDown);
          $document.removeEventListener('touchmove', sv.touchMove);
          $document.removeEventListener('mousemove', sv.mousemove);


          sv.touchStart = function(e) {
            e.preventDefault = function() {};
            originaltouchStart.apply(sv, [e]);
          };

          sv.touchMove = function(e) {
            e.preventDefault = function() {};
            originaltouchMove.apply(sv, [e]);
          };

          sv.mouseDown = function(e) {
            e.preventDefault = function() {};

            if (originalmouseDown) {
              originalmouseDown.apply(sv, [e]);
            }

          };


          sv.mouseMove = function(e) {
            e.preventDefault = function() {};

            if (originalmouseMove) {
              originalmouseMove.apply(sv, [e]);
            }

          };

          container.addEventListener("touchstart", sv.touchStart, false);
          container.addEventListener("mousedown", sv.mouseDown, false);
          $document.addEventListener("touchmove", sv.touchMove, false);
          $document.addEventListener("mousemove", sv.mouseMove, false);
        });

      };
    }
  }
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
// Calls a specified function when enter is pressed on input
// Usage
// <input ng-enter="vm.myFunction()"></input>
(function() {
  'use strict';
  angular.module('app')
    .directive('ngEnter', function() {

      return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
          if (event.which === 13) {
            scope.$apply(function() {
              scope.$eval(attrs.ngEnter);
            });

            event.preventDefault();
          }
        });
      };
    });
})();

(function() {
    'use strict';

    angular.module('app')
        .directive('onFinishRender', onFinishRender);

    onFinishRender.$inject = ['$timeout'];

    function onFinishRender($timeout) {
        return {
            restrict: 'A',
            link: link
        };

        function link(scope) {
            if (scope.$last === true) {
                $timeout(function() {
                    scope.$emit('ngRepeatFinished');
                });
            }
        }
    }
})();

//==========================================================================
//              Style for user selection.
//==========================================================================

(function() {
    'use strict';

    angular.module('app')
        .directive('touch', touch);

    touch.$inject = ['$timeout'];

    function touch($timeout) {
        return {
            restrict: 'A',
            link: link
        };

        function link(scope, element) {
            element.on('click', function() {
                element.addClass('touch');
                $timeout(function() {
                    element.removeClass('touch');
                }, 50);

            });
        }
    }

})();

// Makes width of the view available as JS or directive such as collection repeat
// This makes collection repeat to have dynamic width or height which depends on
//the view width or view height;

// usage:
// Required: IndexModel.vw = INT;
// In index.html, body[vw]
// 1) ion-list>ion-item[collection-repeat="item in items" item-height="vw * 0.20"]
// 2) ANY[vw]
// 3) function controller(IndexModel){
//     console.log(IndexModel.vw);
//    }
(function() {
    'use strict';

    angular.module('app')
        .directive('vw', vw);

    vw.$inject = ['$rootScope', '$window'];

    function vw($rootScope, $window) {
        return {
            link: link
        };

        function link(scope, element) {
            $rootScope.vw = element.prop('offsetWidth');

            $window.addEventListener('resize', function() {
                $rootScope.$apply(function() {
                    $rootScope.windowWidth = element.prop('offsetWidth');
                });
            });
        }
    }


})();

(function() {
  'use strict';
  angular.module('app')
    .filter('categoryToKorean', categoryToKorean);

  categoryToKorean.$inject = [];

  function categoryToKorean() {
    return function(input) {
      if (input === 'maleCloth') {
        return '남성의류';
      } else if (input === 'femaleCloth') {
        return '여성의류';
      } else if (input === 'book') {
        return '서적';
      } else if (input === 'help') {
        return '도와줘';
      } else if (input === 'room') {
        return '방';
      } else if (input === 'donation') {
        return '재능기부';
      } else if (input === 'homeDeco') {
        return '가전';
      } else if (input === 'etc') {
        return '기타';
      } else {
        return '유학장터';
      }
    };
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .filter('cloudinary150', cloudinaryFilter.bind(null, 150));

  function cloudinaryFilter(size) {
    var matching = /upload/;
    return function(input) {
      if (input) {
        var index = input.search(matching);
        return input.substring(0, index) + 'upload/c_scale,w_' + size + '/' + input.substring(input.lastIndexOf('/'));
      } else
        return input;
    };
  }
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Input
// vm.distanceInMeters1 = 10100100
// vm.distanceInMeters2 = 100
// Usage
//<p> {{vm.distanceInMeters1 | mToKm}}</p>
//<p> {{vm.distanceInMeters2 | mToKm}}</p>
// Output
//<p>10100km</p>
//<p>100m</p>
(function() {
  'use strict';
  angular.module('app')
    .filter('mToKm', mToKm);

  mToKm.$inject = [];

  function mToKm() {
    return function(input) {
      if (input >= 1000) {
        return (input / 1000).toFixed(2) + 'km';
      } else {
        return input + 'm';
      }
    };
  }
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Input
//vm.openingHours = [{start: "07:00", end: "20:20"}, ..., {start: "08:00", end: "18:00"} ]
// Usage
//<p> {{vm.openingHours | groupByOpeningHours}}</p>
// Output
//["월~목 07:00 ~ 20:20", "금~토 08:00 ~ 16:00", "일요일 휴무"]

(function() {
  'use strict';

  angular.module('app')
    .filter('groupByOpeningHours', groupByOpeningHours);

  groupByOpeningHours.$inject = ['_'];

  function groupByOpeningHours(_) {
    return filter;

    function filter(openingHours) {
      // append index to object
      openingHours = appendIndexToObj(openingHours);
      // group by same hours
      var grouped = groupByBusinessHours(openingHours);
      // create [{days: [0, 1], start: "08:00", end: "20:00"},...}
      var orderedResultArray = createArrayOfObjWithGroup(grouped);
      // create ["월 ~ 금" 08:00 ~ 03:00", "일요일 휴무"]
      var textArray = _.map(orderedResultArray, function(result) {
        // result = {days:[0,1], start: '', end: ''};
        result.days = _.map(result.days, function(day) {
          var daysKorean = parseDay(day);
          return daysKorean;
        });
        result.days = tildeArrayValuesToText(result.days);
        var apendTime = '';
        if (result.start === result.end) {
          apendTime = '휴무';
        } else {
          apendTime = result.start + ' ~ ' + result.end;
        }
        var texts = result.days + ' ' + apendTime;
        return texts;
      });

      return textArray;
    }


    function appendIndexToObj(openingHours) {
      for (var i = 0; i < openingHours.length; i++) {
        openingHours[i].index = i;
      }
      return openingHours;
    }

    function groupByBusinessHours(openingHours) {
      var grouped = _.groupBy(openingHours, function(hoursObj) {
        var start = hoursObj.start;
        var end = hoursObj.end;
        var groupCategory = start + end;
        return groupCategory;
      });
      return grouped;
    }

    function createArrayOfObjWithGroup(grouped) {
      // grouped = ['1212': [{start:'', end:'', index: 0}, ...]]
      // out = [{days:[0,1], start:'',  end:''}, ...]
      var keys = Object.keys(grouped);

      var resultArray = [];
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var subOpeningHoursArray = grouped[key];

        var daysResult = [];
        for (var j = 0; j < subOpeningHoursArray.length; j++) {
          var openingHourObj = subOpeningHoursArray[j];
          daysResult.push(openingHourObj.index);
        }

        var start = subOpeningHoursArray[0].start;
        var end = subOpeningHoursArray[0].end;

        resultArray.push({
          days: daysResult,
          start: start,
          end: end
        });
      }

      var orderedResultArray = _.sortBy(resultArray, function(obj) {
        var day = obj.days[0];
        if (day === 0) {
          day = 7;
        }
        return day;
      });

      return orderedResultArray;
    }

    function parseDay(day) {
      if (day === 0) {
        return '일요일';
      } else if (day === 1) {
        return '월';
      } else if (day === 2) {
        return '화';
      } else if (day === 3) {
        return '수';
      } else if (day === 4) {
        return '목';
      } else if (day === 5) {
        return '금';
      } else if (day === 6) {
        return '토';
      }
    }

    function tildeArrayValuesToText(array) {
      var daysInNumbers = _.map(array, function(dayInKorean) {
        if (dayInKorean === '일요일') {
          return 7;
        } else if (dayInKorean === '월') {
          return 1;
        } else if (dayInKorean === '화') {
          return 2;
        } else if (dayInKorean === '수') {
          return 3;
        } else if (dayInKorean === '목') {
          return 4;
        } else if (dayInKorean === '금') {
          return 5;
        } else if (dayInKorean === '토') {
          return 6;
        }
      });
      for (var i = 0; i < daysInNumbers.length - 1; i++) {
        var day_1 = daysInNumbers[i];
        var day_2 = daysInNumbers[i + 1];
        if (Math.abs(day_1 - day_2) > 1) {
          var concatStart = array[0];
          for (var j = 1; j < daysInNumbers.length; j++) {
            concatStart = concatStart + ', ' + array[j];
          }
          return concatStart;
        }
      }
      if (array.length > 2) {
        return array[0] + ' ~ ' + array[array.length - 1];
      } else if (array.length === 2) {
        return array[0] + ', ' + array[1];
      } else if (array.length === 1) {
        return array[0];
      }
    }
  }

})();

//====================================================
//  createdBy;
// Seunghoon Ko
//====================================================
// Usage (in controller)
//var filterByTag = $filter('filterByTag');
//var out = filterByTag([1,2,3,4,1,2], 1);

// Out
//[1,1]
(function() {
  'use strict';
  angular.module('app')
    .filter('filterByTag', filterByTag);

  // filterByTag.$inject = [];
  function filterByTag() {

    return filter;

    function filter(collection, tagName) {
      var resultArray = [];
      if (collection) {

        for (var i = 0; i < collection.length; i++) {
          var element = collection[i];
          for (var j = 0; j < element.tags.length; j++) {
            var tag = element.tags[j];
            if (tag === tagName) {
              resultArray.push(element);
            }
          }
        }
      }
      return resultArray;
    }
  }


})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MainController', MainController);

  MainController.$inject = ['MainModel', '$ionicModal', '$scope', 'appStorage', '$ionicSideMenuDelegate', '$state', '$timeout'];

  function MainController(MainModel, $ionicModal, $scope, appStorage, $ionicSideMenuDelegate,
    $state, $timeout) {

    var Main = this;
    Main.Model = MainModel;

    Main.setAlarm = setAlarm;
    Main.logout = logout;


    $ionicModal.fromTemplateUrl('state/modal/requestEditProfile.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      Main.profileModal = modal;
    });
    $ionicModal.fromTemplateUrl('state/modal/requestAccountTermination.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      Main.terminationModal = modal;
    });
    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function setAlarm(bool) {
      if (bool) {
        console.log('set alarm on');
        appStorage.alarm = true;
        MainModel.alarmOn = appStorage.alarm;
      } else {
        console.log('set alarm off');
        appStorage.alarm = false;
        MainModel.alarmOn = appStorage.alarm;
      }
    }

    function logout() {
      appStorage.token = null;
      appStorage.user = {};
      $ionicSideMenuDelegate.toggleLeft(false);
      $state.go('main.home');
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MainModel', MainModel);

  MainModel.$inject = ['appStorage'];

  function MainModel(appStorage) {

    var model = {

      sideMenuList: [{
        name: '카테고리'
      }, {
        name: '상품등록'
      }, {
        name: '판매관리'
      }, {
        name: '찜/댓글'
      }],

      categoryList: [{
        name: 'maleCloth',
        korean: '남성의류'
      }, {
        name: 'femaleCloth',
        korean: '여성의류'
      }, {
        name: 'book',
        korean: '서적'
      }, {
        name: 'help',
        korean: '도와줘'
      }, {
        name: 'room',
        korean: '방'
      }, {
        name: 'donation',
        korean: '재능기부'
      }, {
        name: 'homeDeco',
        korean: '가전'
      }, {
        name: 'etc',
        korean: '기타'
      }],

      sideMenuSetting: [{
        name: '프로필 변경'
      }, {
        name: '쪽지함'
      }, {
        name: '알림설정'
      }, {
        name: '회원탈퇴'
      }],
      alarmOn: appStorage.alarm
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('AnnouncementController', AnnouncementController);

  AnnouncementController.$inject = ['AnnouncementModel'];

  function AnnouncementController(AnnouncementModel) {

    var Announcement = this;
    Announcement.Model = AnnouncementModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('AnnouncementModel', AnnouncementModel);

  AnnouncementModel.$inject = [];

  function AnnouncementModel() {

    var model = {};
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('AnnouncementDetailController', AnnouncementDetailController);

  AnnouncementDetailController.$inject = ['AnnouncementDetailModel'];

  function AnnouncementDetailController(AnnouncementDetailModel) {

    var AnnouncementDetail = this;
    AnnouncementDetail.Model = AnnouncementDetailModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('AnnouncementDetailModel', AnnouncementDetailModel);

  AnnouncementDetailModel.$inject = [];

  function AnnouncementDetailModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('AnnouncementListController', AnnouncementListController);

  AnnouncementListController.$inject = ['AnnouncementListModel'];

  function AnnouncementListController(AnnouncementListModel) {

    var AnnouncementList = this;
    AnnouncementList.Model = AnnouncementListModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('AnnouncementListModel', AnnouncementListModel);

  AnnouncementListModel.$inject = [];

  function AnnouncementListModel() {

    var model = {
      posts: [{
        id: 1,
        title: '학교장터 사용 유의할 점 필독바랍니다~!',
        content: '오리',
        createdBy: {
          user: '관리자'
        },
        createdAt: new Date()
      }, {
        id: 2,
        title: '공지사항 잘되나요',
        content: '오리',
        createdBy: {
          user: '관리자'
        },
        createdAt: new Date()

      }, {
        id: 3,
        title: '공지 사항 잘되는것 같나요',
        content: '오리',
        createdBy: {
          user: '관리자'
        },
        createdAt: new Date()

      }]

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BoardListController', BoardListController);

  BoardListController.$inject = ['BoardListModel'];

  function BoardListController(BoardListModel) {

    var BoardList = this;
    BoardList.Model = BoardListModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BoardListModel', BoardListModel);

  BoardListModel.$inject = [];

  function BoardListModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('CategoryController', CategoryController);

  CategoryController.$inject = ['CategoryModel', 'LinkService'];

  function CategoryController(CategoryModel, LinkService) {

    var Category = this;
    Category.Model = CategoryModel;

    Category.openLink = LinkService.openLink;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('CategoryModel', CategoryModel);

  CategoryModel.$inject = [];

  function CategoryModel() {

    var model = {
      posts: [{
        id: 1,
        title: '대학교 잡지 "장터 매거진 8월호" 출간',
        photos: [{
          url: 'http://lorempixel.com/400/200/sports/1'
        }],
        url: 'http://www.naver.com'
      }, {
        id: 2,
        title: '학교장터 멋지다',
        photos: [{
          url: 'http://lorempixel.com/400/200/sports/2'
        }],
        url: 'http://www.naver.com'
      }, {
        id: 3,
        title: '우리학교 케달로',
        photos: [{
          url: 'http://lorempixel.com/400/200/sports/3'
        }],
        url: 'http://www.naver.com'
      }]
    };
    return model;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .controller('DaumMapController', DaumMapController);

  DaumMapController.$inject = ['DaumMapModel', '$ionicModal', '$scope', '$state', '$stateParams', '$timeout', 'Message'];

  function DaumMapController(DaumMapModel, $ionicModal, $scope, $state, $stateParams, $timeout, Message) {

    var Map = this;
    Map.Model = DaumMapModel;

    Map.searchType = "address";



    Map.findMeThenSearchNearBy = DaumMapModel.findMeThenSearchNearBy;

    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    function onAfterEnter() {}
    Map.searchLocationNearBy = function(value) {
      console.log("---------- value ----------");
      console.log(value);
      console.log("HAS TYPE: " + typeof value);
      console.log("---------- CONSOLE END -------------------");

      DaumMapModel.searchLocationNearBy(value);
    };

    Map.goToDetailHandler = function(state, params) {
      Message.loading();
      DaumMapModel.modal.hide();
      $state.go(state, {
        type: 'local',
        id: DaumMapModel.selectedPlace.id,
        prev: params.prev
      });
    };

    Map.goToHandler = function(state, params) {
      $state.go(state, params);
    };
    Map.hasStateParams = function(paramName) {
      return !!$stateParams[paramName];
    };


    // Make currently selected place from DaumMapDirective available at ModalView
    Map.selectedPlace = DaumMapModel.selectedPlace;

    $scope.$on('$ionicView.enter', function() {
      // Set Modal
      $ionicModal.fromTemplateUrl('state/daumMap/placeModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      })
        .then(function(modal) {
          DaumMapModel.modal = modal;
        });
      DaumMapModel.domMap.relayout();
      if ($stateParams.id) {
        DaumMapModel.findPlaceByIdThenDrawAPlace($stateParams.id);
      }
    });

    $scope.$on('$ionicView.afterEnter', function() {
      Message.loading();
      $timeout(function() {
        DaumMapModel.domMap.relayout();
        if ($stateParams.findMe === 'true') {
          DaumMapModel.findMeThenSearchNearBy();
        } else {
          Message.hide();
        }
      }, 10);
    });

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .directive('daumMap', daumMap);

  daumMap.$inject = ['DaumMapModel', 'Places', 'Bookings', 'Products', '$state', '$cordovaGeolocation', 'Message', '$q', '$stateParams', 'daum'];

  function daumMap(DaumMapModel, Places, Bookings, Products, $state, $cordovaGeolocation, Message, $q, $stateParams, daum) {
    return {
      scope: {
        markerSrc: '@',
        markerClickedSrc: '@',
        markerWidth: '@',
        markerHeight: '@',
      },
      compile: function(element) {
        //==========================================================================
        //              Global Map Property
        //==========================================================================
        var DOM = element[0];
        var mapOptions = {
          center: new daum.maps.LatLng(37.5, 127),
          level: 4,
          draggable: true
        };
        daum.maps.disableHD();
        var map = new daum.maps.Map(DOM, mapOptions);
        var ps = new daum.maps.services.Places();

        //====================================================
        //  IMPLEMENTATIONS COMPILE
        //====================================================
        // Draw Markers after query
        var drawMarkers = function(currentCenter, markerImg, markerClickedImg, scope) {
          resetMarkers();
          requestPlacesWithin(currentCenter)
            .then(processPin.bind(null, markerImg, markerClickedImg, scope))
            .catch(function error(err) {
              console.log(err);
            });
        };
        //====================================================
        //  HELPER
        //====================================================
        function resetMarkers() {
          angular.forEach(DaumMapModel.markers, function(marker) {
            marker.setMap(null);
          });
          DaumMapModel.markers = [];
        }

        function requestPlacesWithin(currentCenter) {
          // Request server for places;
          var PlacesPromise = {};
          if ($stateParams.id) {
            PlacesPromise = Products.findById({
              id: $stateParams.id,
              populates: 'photos'
            }).$promise;
          } else {
            PlacesPromise = Products.getProductWithin({
              type: 'local',
              latitude: currentCenter.latitude,
              longitude: currentCenter.longitude,
              distance: currentCenter.distance || 5000,
              limit: currentCenter.limit || 50,
            }).$promise;
          }
          return PlacesPromise;
        }

        function processPin(markerImg, markerClickedImg, scope, placesWrapper) {
          if ($stateParams.id) {
            DaumMapModel.places = [placesWrapper];
          } else {
            DaumMapModel.places = placesWrapper.products;
          }
          console.log("---------- DaumMapModel.places ----------");
          console.log(DaumMapModel.places);
          console.log("HAS TYPE: " + typeof DaumMapModel.places);
          console.log("---------- CONSOLE END -------------------");


          angular.forEach(DaumMapModel.places, function(place, i) {
            //place = {location:{type:'Point', coordinates:[126.10101, 27.101010]}, ...}
            var placeLongitude = place.geoJSON.coordinates[0];
            var placeLatitude = place.geoJSON.coordinates[1];
            // set marker
            var position = new daum.maps.LatLng(placeLatitude, placeLongitude);
            var marker = new daum.maps.Marker({
              map: map,
              position: position,
              // used as to link to place info
              title: String(i),
              image: markerImg,
              clickable: true
            });
            daum.maps.event.addListener(marker, 'click', function() {
              var marker = this;
              scope.$apply(function() {
                // on click: differentiate clicked image;
                angular.forEach(DaumMapModel.markers, function(otherMarker) {
                  otherMarker.setImage(markerImg);
                });
                marker.setImage(markerClickedImg);
                // on click: show modal which will be filled with place info
                // modal references DaumMapModel.selectedPlace to fill in the info
                var index = Number(marker.getTitle());
                Message.loading();
                Products.findById({
                  id: DaumMapModel.places[index].id,
                  populates: 'photos,createdBy'
                }).$promise
                  .then(function success(data) {
                    Message.hide();
                    DaumMapModel.selectedPlace = data;
                    console.log(data);
                    DaumMapModel.modal.show();
                  }, function error(err) {
                    console.log(err);
                    Message.hide();
                    Message.alert();
                  });
                // DaumMapModel.selectedPlace = DaumMapModel.places[index];
              });
            });
            // Save converted place with click event added.
            DaumMapModel.markers.push(marker);
          });
          Message.hide();
        }

        //====================================================
        //  Functions Exposed to controller via DaumMapModel
        //====================================================
        DaumMapModel.findMeThenSearchNearBy = function(justFind) {
          Message.loading();
          $cordovaGeolocation.getCurrentPosition({
            maximumAge: 3000,
            timeout: 5000
          })
            .then(function success(position) {
              Message.hide();
              if (position.coords == null) {
                Message.alert(
                  '위치 공유가 꺼져있습니다.',
                  '위치 공유를 켜주세요.'
                );
                return false;
              }
              DaumMapModel.currentPosition = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              };
              if (!justFind) {
                map.setCenter(new daum.maps.LatLng(
                  DaumMapModel.currentPosition.latitude,
                  DaumMapModel.currentPosition.longitude
                ));
              }
              // drawMarkers(currentCenter);
            }, function error() {
              Message.hide();
              Message.alert(
                '위치 공유가 꺼져있습니다.',
                '위치 공유를 켜주세요.'
              );
            });
        };


        DaumMapModel.findPlaceByIdThenDrawAPlace = function(id) {
          Message.loading();
          Products.findById({
            id: id,
            populates: 'photos'
          }).$promise
            .then(function success(place) {
              //-------------------------------------------------------
              //  Hacky fix: when coming back to map if the map's center is the same as the
              // place we want to pane to, search does not get called. So make it wiggle a bit.
              //-------------------------------------------------------
              var currentCenter = {
                longitude: map.getCenter().getLng(),
                latitude: map.getCenter().getLat()
              };
              if (Math.abs(currentCenter.longitude - place.geoJSON.coordinates[1]) < 0.00001 && Math.abs(currentCenter.latitude - place.geoJSON.coordinates[0]) < 0.00001) {
                map.panTo(new daum.maps.LatLng(
                  currentCenter.longitude + 0.011,
                  currentCenter.latitude + 0.011
                ));
              }
              //------------------------
              //  Hacky fix ends;
              //------------------------
              map.panTo(new daum.maps.LatLng(
                place.geoJSON.coordinates[1],
                place.geoJSON.coordinates[0]
              ));
              Message.hide();
            }, function error(err) {
              console.log(err);
            });
        };

        DaumMapModel.searchLocationNearBy = function(value) {
          console.log("---------- value daumMapModel searchlocation ----------");
          console.log(value);
          console.log("HAS TYPE: " + typeof value);
          console.log("---------- CONSOLE END -------------------");

          Message.loading();
          if (!value) {
            Message.hide();
            Message.alert('검색하기 알림', '장소 값을 넣어서 다시 검색해주세요');
            return false;
          }
          ps.keywordSearch(value, function(status, data) {
            if (data.places[0] === undefined) {
              Message.hide();
              Message.alert(
                '요청하신 장소가 없습니다',
                '다시검색해주세요'
              );
              return false;
            }
            // move to center of searched result.
            map.panTo(new daum.maps.LatLng(
              data.places[0].latitude,
              data.places[0].longitude
            ));
            // map's center is moved it will drawMarkers().
            Message.hide();
          }, function(err) {
            console.log(err);
            Message.hide();
            Message.alert({
              title: '위치 공유가 꺼져있습니다.',
              template: '위치 공유 켜주세요.'
            });
          });
        };

        return function(scope) {
          // Marker style properties.
          var markerSize = new daum.maps.Size(Number(scope.markerWidth), Number(scope.markerHeight));
          var markerImg = new daum.maps.MarkerImage(scope.markerSrc, markerSize);
          var markerClickedImg = new daum.maps.MarkerImage(scope.markerClickedSrc, markerSize);
          map.relayout();
          DaumMapModel.domMap = map;
          // ------------------------
          //  Search when moved
          // ------------------------
          daum.maps.event.addListener(map, 'idle', function() {
            map.relayout();
            Message.loading();
            var currentCenter = {
              longitude: map.getCenter().getLng(),
              latitude: map.getCenter().getLat()
            };
            angular.extend(currentCenter, {
              distance: 2000,
              limit: 20
            });
            drawMarkers(currentCenter, markerImg, markerClickedImg, scope);
          });
        };
      }
    };
  }

})();

(function() {
    'use strict';
    angular.module('app')
        .factory('DaumMapModel', DaumMapModel);

    function DaumMapModel() {
        var model = {
            // need to specify category for search
            category: 'NAIL-PLACE', // only one category hence fixed
            currentPosition: {
                latitude: 'FLOAT',
                longitude: 'FLOAT'
            },
            markers: [],
            places: [],
            selectedPlace: {
                // response.places[n] selected from DaumMapDirective
            },
            modal: {
                //Defined in DaumMapController
            },
            findMeThenSearchNearBy: function(justFindDontDraw) {
                //Defined in DaumMapDirective
                console.log(justFindDontDraw + 'is a boolean to use outside map view');
            },
            searchLocationNearBy: function() {
                //Defined in DaumMapDirective
            },
        };

        return model;
    }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('FavoriteController', FavoriteController);

  FavoriteController.$inject = ['FavoriteModel'];

  function FavoriteController(FavoriteModel) {

    var Favorite = this;
    Favorite.Model = FavoriteModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('FavoriteModel', FavoriteModel);

  FavoriteModel.$inject = [];

  function FavoriteModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('SavedController', SavedController);

  SavedController.$inject = ['SavedModel', 'Products', 'appStorage', '$scope', '$stateParams'];

  function SavedController(SavedModel, Products, appStorage, $scope, $stateParams) {

    var Saved = this;
    Saved.Model = SavedModel;
    Saved.dynamicStyle = dynamicStyle;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function dynamicStyle(post) {
      var result = {};
      if (post && post.isAds) {
        result.height = '120';
        result.width = '99%';
      } else {
        result.height = '160';
        result.width = '33%';
      }
      return result;
    }

    function onBeforeEnter() {
      reset();
      if ($stateParams.by === 'favorited') {
        getProductsWithIds(appStorage.favorite);
      } else if ($stateParams.by === 'commented') {
        getProductsWithComments();
      }
    }

    //====================================================
    //  Helper
    //====================================================
    function reset() {
      SavedModel.posts = [];
    }

    function getProductsWithIds(ids) {
      console.log(Array.isArray(ids));
      Products.getProductsWithIds({
        id: ids
      }).$promise
        .then(function success(products) {
          SavedModel.posts = products;
          console.log(products);
        })
        .catch(function error(err) {
          console.log(err);
        });
    }

    function getProductsWithComments() {
      Products.getProductsWithComments({
        //username from httpInterceptor is used
      }).$promise
        .then(function success(products) {
          SavedModel.posts = products;
          console.log(products);
        })
        .catch(function error(err) {
          console.log(err);
        });

    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('SavedModel', SavedModel);

  SavedModel.$inject = ['MockService'];

  function SavedModel(MockService) {

    var model = {
      //====================================================
      //  post lists
      //====================================================
      posts: []
    };

    // MockService.generatePosts(model.posts, 10);

    return model;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .directive('googleMap', googleMap);

  googleMap.$inject = ['DaumMapModel', 'Places', 'Bookings', 'Products', '$state', '$cordovaGeolocation', 'Message', '$q', '$stateParams', 'daum', 'google', '$window'];

  function googleMap(DaumMapModel, Places, Bookings, Products, $state, $cordovaGeolocation, Message, $q, $stateParams, daum, google, $window) {
    return {
      scope: {
        markerSrc: '@',
        markerClickedSrc: '@',
        markerWidth: '@',
        markerHeight: '@',
      },
      compile: function(element) {
        var DOM = element[0];
        var mapOptions = {
          center: {
            lat: -34.397,
            lng: 150.644
          },
          zoom: 8,
          disableDefaultUI: true
        };
        var map = new google.maps.Map(DOM, mapOptions);
        return function(scope) {};
      } // compile
    }; // return obj
  } // End googleMap
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('HomeController', HomeController);

  HomeController.$inject = ['HomeModel', 'LinkService', 'Message'];

  function HomeController(HomeModel, LinkService, Message) {

    var Home = this;
    Home.Model = HomeModel;
    Home.share = share;
    Home.showMessage = showMessage;

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function share() {
      var title = '학생들의 중고거래장터 학교장터!';
      var content = '집안에 잠들어있는 필요없는 물건들을 돈으로 바꿔가세요~';
      var url = 'https://play.google.com/store/apps/details?id=kr.co.schoolmarket&hl=ko';
      LinkService.share(title, content, url);
    }

    function showMessage() {
      return Message.alert('유학장터 알림', '유학장터 준비 중입니다.');
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('HomeModel', HomeModel);

  HomeModel.$inject = [];

  function HomeModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('LoginController', LoginController);

  LoginController.$inject = ['LoginModel', 'Users', 'appStorage', '$state', 'AuthService', 'Message'];

  function LoginController(LoginModel, Users, appStorage, $state, AuthService, Message) {

    var Login = this;
    Login.Model = LoginModel;

    Login.loginHandler = loginHandler;
    Login.loginWithFacebook = loginWithFacebook;

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function loginHandler() {
      Message.loading();
      Users.login({}, {
        identifier: LoginModel.form.email,
        password: LoginModel.form.password
      }).$promise
        .then(function success(authData) {
          appStorage.token = authData.token;
          appStorage.user = authData.user;
          Message.hide();
          $state.go('main.home');
        })
        .catch(function err(error) {
          console.log(error);
          Message.hide();
          Message.alert('로그인 알림', '이메일이나 암호가 잘못 되었습니다.')
            .then(function() {
              LoginModel.form = {};
            });
        });
    }

    function loginWithFacebook() {
      Message.loading();
      return AuthService.loginWithFacebook()
        .then(function success(data) {
          console.log(data);
          Message.hide();
          $state.go('main.home');
        }, function err(error) {
          console.log(error);
        });
    }

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('LoginModel', LoginModel);

  LoginModel.$inject = [];

  function LoginModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MapController', MapController);

  MapController.$inject = ['MapModel'];

  function MapController(MapModel) {

    var Map = this;
    Map.Model = MapModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MapModel', MapModel);

  MapModel.$inject = [];

  function MapModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MessageDetailController', MessageDetailController);

  MessageDetailController.$inject = ['MessageDetailModel', '$scope', 'Messages', '$stateParams', 'Message', '$state'];

  function MessageDetailController(MessageDetailModel, $scope, Messages, $stateParams, Message, $state) {

    var MessageDetail = this;
    MessageDetail.Model = MessageDetailModel;

    MessageDetail.postMessage = postMessage;
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function onBeforeEnter() {
      console.log($stateParams.from);
      Messages.readMessagesFrom({
        from: $stateParams.from
      }).$promise
        .then(function success(messagesWrapper) {
          MessageDetail.newMessage = null;
          MessageDetailModel.messages = messagesWrapper.messages;
          console.log("---------- messagesWrapper ----------");
          console.log(messagesWrapper);
          console.log("HAS TYPE: " + typeof messagesWrapper);
          console.log("---------- CONSOLE END -------------------");
        })
        .catch(function error(err) {
          console.log("---------- err ----------");
          console.log(err);
          console.log("HAS TYPE: " + typeof err);
          console.log("---------- CONSOLE END -------------------");

        });
    }

    function postMessage() {
      var message = MessageDetail.newMessage;
      Message.loading();
      Messages.sendMessage({}, {
        message: message,
        to: $stateParams.from
      }).$promise
        .then(function success(message) {
          console.log(message);
          $state.reload();
          Message.hide();
        })
        .catch(function error(err) {
          console.log(err);
          Message.hide();
        });
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MessageDetailModel', MessageDetailModel);

  MessageDetailModel.$inject = [];

  function MessageDetailModel() {

    var model = {
      messages: []
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MessageListController', MessageListController);

  MessageListController.$inject = ['MessageListModel', '$scope', 'Messages', 'Message'];

  function MessageListController(MessageListModel, $scope, Messages, Message) {

    var MessageList = this;
    MessageList.Model = MessageListModel;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function onBeforeEnter() {
      Message.loading();
      Messages.getMyInboxSenderList({

      }).$promise
        .then(function success(messagesWrapper) {
          Message.hide();
          MessageListModel.messages = messagesWrapper.senders;
          console.log("---------- messa ----------");
          console.log(messagesWrapper);
          console.log("HAS TYPE: " + typeof messa);
          console.log("---------- CONSOLE END -------------------");
        })
        .catch(function error(err) {
          Message.hide();
          console.log("---------- err ----------");
          console.log(err);
          console.log("HAS TYPE: " + typeof err);
          console.log("---------- CONSOLE END -------------------");
        });
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MessageListModel', MessageListModel);

  MessageListModel.$inject = [];

  function MessageListModel() {

    var model = {
      messages: [
        // {
        //   id: '',
        //   createdAt:'',
        //   from:'',
        //   message:'',
        //   createdBy: '',
        //   read: ''
        // }
      ]
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MyPostListController', MyPostListController);

  MyPostListController.$inject = ['Products', 'MyPostListModel', '$state', '$stateParams', '$timeout', 'Message', '$scope'];

  function MyPostListController(Products, MyPostListModel, $state, $stateParams, $timeout, Message, $scope) {

    var MyPostList = this;
    MyPostList.Model = MyPostListModel;
    MyPostList.dynamicStyle = dynamicStyle;

    MyPostList.select = select;

    MyPostList.update = update;
    MyPostList.setSoldOut = setSoldOut;
    MyPostList.cancelSoldOut = cancelSoldOut;

    MyPostList.destroy = destroy;

    MyPostList.toggleUpdate = toggleUpdate;
    MyPostList.toggleSetSoldOut = toggleSetSoldOut;
    MyPostList.toggleDestroy = toggleDestroy;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function onBeforeEnter() {
      Message.loading();
      Products.getMyProducts({
        type: $stateParams.type,
        populates: 'photos'
      }).$promise
        .then(function success(productsWrapper) {
          MyPostListModel.posts = productsWrapper.products;
          Message.hide();
        })
        .catch(function error(err) {
          Message.hide();
          Message.alert();
          console.log(err);
        });
    }

    function dynamicStyle(post) {
      var result = {};
      if (post && post.isAds) {
        result.height = '120';
        result.width = '99%';
      } else {
        result.height = '160';
        result.width = '33%';
      }
      return result;
    }

    function select(postId) {
      togglePop(MyPostListModel.selectedPosts, postId);
    }

    function update() {
      if (MyPostListModel.selectedPosts.length === 0) {
        return Message.alert('수정하기 알림', '수정하실 상품을 먼저 골라주세요')
          .then(function() {});
      } else if (MyPostListModel.selectedPosts.length > 1) {
        return Message.alert('수정하기 알림', '수정하실 상품을 1개만 골라주세요')
          .then(function() {
            MyPostListModel.selectedPosts = [];
          });
      } else if (MyPostListModel.selectedPosts.length === 1) {
        $state.go('main.postRegister', {
          type: $stateParams.type,
          id: MyPostListModel.selectedPosts[0],
          method: 'update'
        });
      }
      MyPostListModel.selectedPosts = [];
    }

    function setSoldOut() {
      if (MyPostListModel.selectedPosts.length === 0) {
        return Message.alert('Sold Out 알림', 'Sold Out 하실 상품들을 먼저 골라주세요');
      }
      Message.loading();
      var productIds = MyPostListModel.selectedPosts;
      Products.setSoldOut({
        id: productIds
      }).$promise
        .then(function success(data) {
          $state.reload();
          Message.hide();
          console.log(data);
        })
        .catch(function error(err) {
          Message.hide();
          console.log(err);
        });
    }

    function cancelSoldOut(postId) {
      Message.loading();
      Products.unsetSoldOut({
        id: postId
      }).$promise
        .then(function success(data) {
          $state.reload();
          Message.hide();
          console.log(data);
        })
        .catch(function error(err) {
          Message.hide();
          console.log(err);
        });
    }

    function destroy() {
      if (MyPostListModel.selectedPosts.length === 0) {
        return Message.alert('삭제하기 알림', '삭제하기 하실 상품들을 먼저 골라주세요');
      }
      Message.loading();
      Products.removeProducts({
        id: MyPostListModel.selectedPosts
      }).$promise
        .then(function processDeletedPosts(postsArray) {
          console.log(postsArray);
          MyPostListModel.selectedPosts = [];
          $state.reload();
          Message.hide();
        })
        .catch(function handleError(err) {
          MyPostListModel.selectedPosts = [];
          console.log(err);
          Message.hide();
        });
    }

    function toggleUpdate() {
      MyPostListModel.status = 'update';
    }

    function toggleSetSoldOut() {
      MyPostListModel.status = 'soldOut';
    }

    function toggleDestroy() {
      MyPostListModel.status = 'destroy';
      MyPostListModel.postsToDestroy = [];
    }

    //====================================================
    //  Helper
    //====================================================
    function togglePop(array, id) {
      if (array.indexOf(id) !== -1) {
        array.splice(array.indexOf(id), 1);
      } else {
        array.push(id);
      }
    }

  } // end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MyPostListModel', MyPostListModel);

  MyPostListModel.$inject = [];

  function MyPostListModel() {

    var model = {
      //====================================================
      //  post lists
      //====================================================
      posts: [],
      selectedPosts: [],
      postsToUpdate: [],
      postsToSetSoldOut: [],
      postsToDestroy: [],
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PostDetailController', PostDetailController);

  PostDetailController.$inject = ['PostDetailModel', 'Products', 'Comments', 'Users', 'appStorage', '$ionicModal', '$scope', 'LinkService', 'FavoriteService', '$state', '$stateParams', 'Message', '$ionicScrollDelegate', '$ionicSlideBoxDelegate', '_', '$timeout', 'Messages', '$ionicHistory'];

  function PostDetailController(PostDetailModel, Products, Comments, Users, appStorage, $ionicModal, $scope, LinkService, FavoriteService, $state, $stateParams, Message, $ionicScrollDelegate, $ionicSlideBoxDelegate, _, $timeout, Messages, $ionicHistory) {

    var PostDetail = this;
    PostDetail.Model = PostDetailModel;

    PostDetail.comment = null;
    PostDetail.commentReply = null;

    PostDetail.isFavorite = FavoriteService.isFavorite;
    PostDetail.call = LinkService.call;

    PostDetail.getUserPhoto = getUserPhoto;
    PostDetail.getUserNickname = getUserNickname;
    PostDetail.addComment = addComment;
    PostDetail.reply = reply;
    PostDetail.sendMessage = sendMessage;
    PostDetail.postMessage = postMessage;
    PostDetail.toggleSaveToFavorite = toggleSaveToFavorite;
    PostDetail.requestLoginHandler = requestLoginHandler;
    PostDetail.goBack = goBack;
    PostDetail.replyModalHandler = replyModalHandler;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    //====================================================
    //  Implementations
    //====================================================
    function getUserPhoto(user) {
      if (user && user.profile_picture && user.profile_picture.url) {
        return user.profile_picture.url;
      }
      if (user && user.profile_image) {
        return user.profile_image;
      }
    }

    function getUserNickname(createdBy) {
      return createdBy && createdBy.nickname;
    }

    function addComment(comment) {
      if (!appStorage.token) {
        return PostDetail.requestLoginModal.show();
      }
      Comments.addCommentToPost({}, {
        content: comment,
        product: $stateParams.id,
        isParent: true
      }).$promise
        .then(function success(data) {
          console.log(data);
          // PostDetailModel.post.comments.push(data);
          // $ionicScrollDelegate.resize();
          Message.alert('댓글달기 알림', '댓글을 성공적으로 작성하셨습니다.')
            .then(function alertCB() {
              resetComment();
              $state.reload();
            });
        })
        .catch(function error(err) {
          console.log('error');
          console.log(err);
        });
    }

    function reply() {
      if (!appStorage.token) {
        return PostDetail.requestLoginModal.show();
      }
      var parentId = PostDetailModel.commentToReply.id;
      var commentReply = PostDetail.commentReply;

      return Comments.reply({}, {
          parent: parentId,
          content: commentReply,
          product: $stateParams.id
        }).$promise
        .then(function success() {
          return Message.alert('답변하기 알림', '답변을 성공적으로 하였습니다.');
        })
        .then(function alertCB() {
          PostDetail.replyModal.hide();
          $state.reload();
        })
        .catch(function error(err) {
          console.log("---------- err ----------");
          console.log(err);
          console.log("HAS TYPE: " + typeof err);
          console.log("---------- CONSOLE END -------------------");
        });
    }

    function sendMessage() {
      if (!appStorage.token) {
        return Message.alert('쪽지보내기 알림', '로그인을 해주세요')
          .then(function() {
            $state.go('main.login');
          });
      }
      PostDetail.currentDate = new Date();
      PostDetail.sendMessageModal.show();
    }

    function postMessage() {
      var message = PostDetail.message;
      Message.loading();
      Messages.sendMessage({}, {
        message: message,
        to: PostDetailModel.post.createdBy.id
      }).$promise
        .then(function success(message) {
          console.log(message);
          Message.hide();
          return Message.alert('메세지 작성 알림', '메세지가 성공적으로 작성되었습니다');
        })
        .then(function() {
          PostDetail.sendMessageModal.hide();
        })
        .catch(function error(err) {
          Message.hide();
          console.log(err);
        });
    }

    function toggleSaveToFavorite(postId) {
      if (FavoriteService.isFavorite(postId)) {
        FavoriteService.unlike(postId);
      } else if (!FavoriteService.isFavorite(postId)) {
        FavoriteService.like(postId);
      }
      FavoriteService.toggleSaveToFavorite(postId);
    }

    function requestLoginHandler() {
      PostDetail.requestLoginModal.hide()
        .then(function() {
          $state.go('main.login');
        });
    }

    function goBack() {
      if ($stateParams.prev === 'main.daumMap') {
        return $state.go('main.daumMap', {
          id: $stateParams.id
        });
      } else {
        $ionicHistory.goBack();
      }
    }

    function replyModalHandler(comment) {
      PostDetailModel.commentToReply = comment;
      PostDetail.replyModal.show();
    }

    function onBeforeEnter() {
      Message.loading();
      reset();
      findById($stateParams.id);
    }

    //====================================================
    //  Helper Functions
    //====================================================
    function resetComment() {
      PostDetail.comment = null;
    }

    function reset() {
      PostDetail.commentReply = null;
      PostDetail.message = null;
      PostDetail.comment = null;
      PostDetailModel.post = {};
      PostDetailModel.comments = [];
    }

    function findById(id) {
      findAProductWithId(id)
        .then(findCommentsWithPostId)
        .then(processComments)
        .catch(function error(err) {
          console.log(err);
          Message.hide();
        });
    }

    //====================================================
    //  Helper^2
    //====================================================
    function findAProductWithId(id) {
      Message.loading();
      return Products.findById({
        id: id,
        populates: 'photos,createdBy'
      }).$promise;
    }

    function findCommentsWithPostId(post) {
      console.log(post);
      PostDetailModel.post = post;
      $ionicSlideBoxDelegate.update();
      $ionicScrollDelegate.resize();
      if (!appStorage.token) {
        throw new Error('not logged in');
      }
      return Comments
        .find({
          productId: post.id
        }).$promise;
    }

    function processComments(comments) {
      PostDetailModel.comments = comments;
      Message.hide();
      console.log("---------- comments ----------");
      console.log(comments);
      console.log("HAS TYPE: " + typeof comments);
      console.log("---------- CONSOLE END -------------------");
    }

    //====================================================
    //  Modals
    //====================================================
    $ionicModal.fromTemplateUrl('state/modal/requestLogin.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      PostDetail.requestLoginModal = modal;
    });

    $ionicModal.fromTemplateUrl('state/modal/sendMessage.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      PostDetail.sendMessageModal = modal;
    });

    $ionicModal.fromTemplateUrl('state/modal/replyModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      PostDetail.replyModal = modal;
    });

    $ionicModal.fromTemplateUrl('state/modal/fullSlideBoxModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      PostDetail.slideBoxModal = modal;
    });

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PostDetailModel', PostDetailModel);

  PostDetailModel.$inject = [];

  function PostDetailModel() {

    var model = {
      post: {},
      comments: [],
      commentToReply: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PostListController', PostListController);

  PostListController.$inject = ['Products', 'PostListModel', '$scope', '$timeout', 'Message', 'LinkService', '$stateParams', '$ionicScrollDelegate'];

  function PostListController(Products, PostListModel, $scope, $timeout, Message, LinkService, $stateParams, $ionicScrollDelegate) {

    // add ads on every end of multiples of adsOnRow
    // var adsOnRow = 2;

    var PostList = this;
    var searchMode = false;

    PostList.Model = PostListModel;

    PostList.dynamicStyle = dynamicStyle;
    PostList.searchWord = null;
    PostList.search = search;
    PostList.openLink = LinkService.openLink;
    PostList.getMoreProducts = getMoreProducts;
    PostList.checkForMore = checkForMore;

    PostList.showAlert = showAlert;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    //====================================================
    //  Implementations
    //====================================================
    function search() {
      searchMode = true;
      Message.loading();
      Products.getProducts({
        type: $stateParams.type,
        limit: 20,
        populates: 'photos',
        sort: 'id DESC',
        filter: PostList.searchWord
      }).$promise
        .then(function success(productsWrapper) {
          console.log(productsWrapper.products);
          PostListModel.posts = productsWrapper.products;
          PostListModel.more = productsWrapper.more;
          $ionicScrollDelegate.resize();
          Message.hide();
        })
        .catch(function error(err) {
          console.log(err);
          Message.hide();
        });
    }

    function dynamicStyle(post) {
      var result = {};
      if (post.isAds) {
        result.height = '120';
        result.width = '99%';
      } else {
        result.height = '160';
        result.width = '33%';
      }
      return result;
    }


    function onBeforeEnter() {
      getProducts();
    }

    function getProducts() {
      searchMode = false;
      Products.getProducts({
        category: $stateParams.category,
        type: $stateParams.type,
        sort: 'id DESC',
        limit: 20,
        populates: 'photos',
      }).$promise
        .then(function success(productsWrapper) {
          console.log(productsWrapper);

          // var results = [];
          // angular.forEach(productsWrapper.products, function(product) {
          //   if (product.soldOut === false) {
          //     results.push(product);
          //   }
          // });
          // PostListModel.posts = results;

          PostListModel.posts = productsWrapper.products;
          PostListModel.more = productsWrapper.more;
          addAdsToPosts(2, false);
          $ionicScrollDelegate.resize();
        })
        .catch(function error(err) {
          Message.alert();
          console.log(err);
        });
    }

    function getMoreProducts() {
      var promise;
      if (searchMode === false) {
        promise = Products.getProducts({
          category: $stateParams.category,
          type: $stateParams.type,
          sort: 'id DESC',
          skip: PostListModel.posts.length,
          limit: 20,
          populates: 'photos'
        }).$promise;
      } else if (searchMode === true) {
        promise = Products.getProducts({
          skip: PostListModel.posts.length,
          type: $stateParams.type,
          limit: 20,
          populates: 'photos',
          sort: 'id DESC',
          filter: PostList.searchWord
        }).$promise;
      }
      promise
        .then(function success(productsWrapper) {
          PostListModel.more = productsWrapper.more;
          angular.forEach(productsWrapper.products, function(product) {
            PostListModel.posts.push(product);
          });
          $ionicScrollDelegate.resize();
          $scope.$broadcast('scroll.infiniteScrollComplete');
        })
        .catch(function error(err) {
          console.log(err);
        });
    }

    function checkForMore() {
      return PostListModel.more;
    }

    function showAlert() {
      Message.alert('sold out 알림', '이미 팔린 물품입니다.');
    }
    //====================================================
    //  Helper
    //====================================================
    // function addAdsToPosts(adsOnRow, upfront) {
    //   var index = null;
    //   if (upfront) {
    //     index = 0;
    //   } else {
    //     index = adsOnRow * 3;
    //   }
    //   var posts = PostListModel.posts;
    //   var ads = PostListModel.ads;
    //   $timeout(function() {
    //     for (var i = 0; i < ads.length; i++) {
    //       posts.splice(index, 0, ads[i]);
    //       index = index + adsOnRow * 3 + 1;
    //     }
    //   }, 0);
    // }

    function addAdsToPosts(adsOnRow) {

    }

  } // END;
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PostListModel', PostListModel);

  PostListModel.$inject = [];

  function PostListModel() {

    var model = {
      //====================================================
      //  post lists
      //====================================================
      posts: [],
      postsAndAds: [],
      //====================================================
      //  Advertisements
      //====================================================
      ads: [{
        id: 1,
        title: '',
        summary: '',
        content: '',
        url: 'http://www.naver.com',
        photos: [{
          url: 'http://lorempixel.com/200/100/nature/1'
        }],
        isAds: true
      }, {
        id: 2,
        title: '',
        summary: '',
        content: '',
        url: 'http://www.naver.com',
        photos: [{
          url: 'http://lorempixel.com/200/100/nature/2'
        }],
        isAds: true
      }, {
        id: 3,
        title: '',
        summary: '',
        content: '',
        url: 'http://www.naver.com',
        photos: [{
          url: 'http://lorempixel.com/200/100/nature/3'
        }],
        isAds: true
      }, {
        id: 4,
        title: '',
        summary: '',
        content: '',
        url: 'http://www.naver.com',
        photos: [{
          url: 'http://lorempixel.com/200/100/nature/4'
        }],
        isAds: true
      }]
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PostRegisterController', PostRegisterController);

  PostRegisterController.$inject = ['PostRegisterModel', 'MainModel', '$stateParams', 'Message', 'ImageService', 'Products', 'daum', '$ionicScrollDelegate', '$timeout', '$scope', '$state', 'appStorage', 'Schools', '_', '$q'];

  function PostRegisterController(PostRegisterModel, MainModel, $stateParams, Message, ImageService, Products, daum, $ionicScrollDelegate, $timeout, $scope, $state, appStorage,
    Schools, _, $q
  ) {

    var PostRegister = this;
    PostRegister.Model = PostRegisterModel;
    PostRegisterModel.form.photos = [];
    // needed for selecting category;
    PostRegister.categoryList = MainModel.categoryList;
    PostRegister.toggleShowPhone = toggleShowPhone;
    PostRegister.create = create;
    PostRegister.update = update;
    PostRegister.reset = reset;
    PostRegister.getImage = getImage;
    PostRegister.searchPlace = searchPlace;
    PostRegister.selectPlace = selectPlace;
    PostRegister.getPhoto = getPhoto;
    PostRegister.removePhoto = removePhoto;
    PostRegister.showCircle = showCircle;
    // PostRegister.schools = Schools;
    PostRegister.getSchools = getSchools;

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    function onBeforeEnter() {
      if ($stateParams.method === 'update') {
        PostRegisterModel.form.photos = [];
        return Products
          .findById({
            id: $stateParams.id,
            populates: 'photos'
          }).$promise
          .then(function success(product) {
            console.log(product);
            var form = PostRegisterModel.form;
            form.category = product.category;
            form.name = product.name;
            form.description = product.description;
            form.price = Number(product.price);
            form.address = product.address;
            form.geoJSON = product.geoJSON;
            form.showPhone = product.showPhone;
            form.id = $stateParams.id;
            var tags = product.school.split(', ');
            PostRegister.tags = _.map(tags, function(tag) {
              return {
                text: tag
              };
            });
            PostRegisterModel.imageDataArray = product.photos;
          })
          .catch(function error(err) {
            console.log(err);
          });
      }
    }

    function getSchools() {
      return Schools;
    }

    function toggleShowPhone(bool) {
      if (bool) {
        PostRegisterModel.form.showPhone = true;
      } else {
        PostRegisterModel.form.showPhone = false;
      }
    }

    function create() {
      Message.loading();
      if ($stateParams.type === 'local') {
        PostRegisterModel.form.type = 'local';
      } else if ($stateParams.type === 'abroad') {
        PostRegisterModel.form.type = 'abroad';
      }
      return postProduct()
        .then(function() {
          Message.hide();
          return Message.alert('상품 등록 알림', '상품이 성공적으로 등록되었습니다.');
        })
        .then(function(messageResp) {
          console.log(messageResp);
          reset();
          $state.go('main.postList', {
            type: $stateParams.type
          });
        })
        .catch(function(err) {
          Message.hide();
          console.log(err);
        });
    }

    function getPhoto(index) {
      var array = PostRegisterModel.imageDataArray;
      if (array[index] && typeof array[index] !== 'string') {
        return array[index].url;
      } else if (array[index] && typeof array[index] === 'string') {
        return array[index];
      }
    }

    function removePhoto(index) {
      var array = PostRegisterModel.imageDataArray;
      array.splice(index, 1);
    }

    function showCircle(index) {
      var array = PostRegisterModel.imageDataArray;
      if (array[index]) {
        return true;
      } else {
        return false;
      }
    }

    function update() {
      Message.loading();
      if ($stateParams.type === 'local') {
        PostRegisterModel.form.type = 'local';
      } else if ($stateParams.type === 'abroad') {
        PostRegisterModel.form.type = 'abroad';
      }
      // Seperate DataURI from cloudinary reference object;
      var array = PostRegisterModel.imageDataArray;
      var count = 0;
      for (var i = 0; i < array.length; i++) {
        if (array[i] && typeof array[i] !== 'string') {
          PostRegisterModel.form.photos.push(array[i]);
          count++;
        }
      }
      array.splice(0, count);
      return postProduct('PUT')
        .then(function() {
          Message.hide();
          return Message.alert('상품 업데이트 알림', '상품이 성공적으로 업데이트 되었습니다.');
        })
        .then(function(messageResp) {
          console.log(messageResp);
          reset();
          $state.go('main.postList', {
            type: $stateParams.type
          });
        })
        .catch(function(err) {
          Message.hide();
          console.log(err);
        });
    }


    function getImage(from) {
      var existingPhotos = PostRegister.Model.form.photos;
      if (!existingPhotos || existingPhotos.length === 0) {
        existingPhotos = [];
      }
      if (PostRegisterModel.imageDataArray.length + existingPhotos.length > 4) {
        Message.alert('사진올리기 알림', '사진은 최대 5개 올리실수 있습니다.');
      }
      ImageService.get({
        from: from,
        fileUris: PostRegisterModel.imageFileArray,
        dataUris: PostRegisterModel.imageDataArray
      });
    }

    function postProduct(method) {
      var ok = validateForm();
      var deferred = $q.defer();
      if (!ok) {
        deferred.reject(false);
        return deferred.promise;
      }
      PostRegisterModel.form.phone = Number(appStorage.user.phone);
      var schools = _.map(PostRegister.tags, function(tagObj) {
        return tagObj.text;
      });
      PostRegisterModel.form.school = schools.join(', ');
      return ImageService.post({
        url: '/product',
        dataUris: PostRegisterModel.imageDataArray,
        fields: PostRegisterModel.form
      }, method);
    }

    function reset() {
      PostRegisterModel.form = {
        showPhone: true
      };
      $timeout(function() {
        PostRegisterModel.imageFileArray = [];
        PostRegisterModel.imageDataArray = [];
        ImageService.clean();
      }, 0);
    }

    function validateForm() {
      var form = PostRegisterModel.form;
      var alert = Message.alert.bind(null, '상품등록 알림');
      if (!PostRegisterModel.imageDataArray[0] && $stateParams.method !== 'update') {
        alert('제품사진등록은 1개이상 필수입니다.');
        return false;
      } else if (!form.category && $stateParams.type === 'local') {
        alert('카테고리를 설정해주세요.');
        return false;
      } else if (!form.name) {
        alert('제목을 입력해주세요.');
        return false;
      } else if (!form.description) {
        alert('내용을 입력해주세요.');
        return false;
      } else if ((!PostRegister.tags || !PostRegister.tags[0]) && $stateParams.type === 'local') {
        alert('학교를 선택해주세요.');
        return false;
      } else if (!form.price && $stateParams.type === 'local') {
        alert('가격을 입력해주세요.');
        return false;
      } else if (!form.geoJSON && $stateParams.method !== 'update' && $stateParams.type === 'local') {
        alert('팔고싶은 장소를 입력후 서치버튼을 눌러 골라주세요.');
        return false;
      } else {
        return true;
      }
    }

    function searchPlace() {
      if (!PostRegisterModel.form.address) {
        return false;
      }
      var ps = new daum.maps.services.Places();
      Message.loading();
      ps.keywordSearch(PostRegisterModel.form.address, function(status, data) {
        // if no search result, notify and exit.
        Message.hide();
        if (data.places[0] === undefined) {
          Message.alert(
            '요청하신 장소가 없습니다',
            '다시검색해주세요'
          );
          return false;
        }
        PostRegisterModel.places = data.places;
        console.log(data.places);

      }, function(err) {
        console.log(err);
        Message.hide();
        Message.alert();
      });
    }

    function selectPlace(placeObj) {
      PostRegisterModel.form.address = placeObj.address;
      PostRegisterModel.form.geoJSON = {
        type: 'Point',
        coordinates: [Number(placeObj.longitude), Number(placeObj.latitude)]
      };
      PostRegisterModel.places = [];
      $ionicScrollDelegate.resize();
      console.log(PostRegisterModel.form.address);
      console.log(PostRegisterModel.form.geoJSON);
      console.log(typeof PostRegisterModel.form.geoJSON.coordinates[0]);
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PostRegisterModel', PostRegisterModel);

  PostRegisterModel.$inject = [];

  function PostRegisterModel() {

    var model = {
      form: {
        // showPhone: true,
        // category: "maleCloth",
        // description: "11",
        // address: "11111",
        // name: "1",
        // price: 1111,
        // school: "111",
        // type: 'local | abroad',
        // geoJSON: {
        //   type: 'Point',
        //   coordinates: [130, 50]
        // },
        // createdBy: {},
        // createdAt: {}
      },
      places: [],
      imageFileArray: [],
      imageDataArray: []
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProfileController', ProfileController);

  ProfileController.$inject = ['ProfileModel', 'appStorage', 'ImageService', 'Message', '$rootScope', '$state', 'Users', '$scope'];

  function ProfileController(ProfileModel, appStorage, ImageService, Message, $rootScope, $state, Users, $scope) {

    var Profile = this;
    Profile.Model = ProfileModel;

    Profile.update = update;
    Profile.getPicture = getPicture;
    Profile.goBack = goBack;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function update() {
      Message.loading();
      if (!ProfileModel.form.phone) delete ProfileModel.form.phone;
      if (!ProfileModel.form.nickname) delete ProfileModel.form.nickname;
      // If no picture update
      if (ProfileModel.dataArray.length === 0) {
        return Users.updateUser({}, ProfileModel.form).$promise
          .then(function success(userArray) {
            var user = userArray[0];
            setAppStorageValues(user);
            Message.hide();
            return Message.alert('프로필 업데이트 알림', '업데이트가 성공적으로 되었습니다');
          })
          .then(function response() {
            $state.go('main.home');
          })
          .catch(function error(err) {
            Message.hide();
            console.log(err);
          });
      } else if (ProfileModel.dataArray.length > 0) {
        ImageService.post({
          url: '/user/updateWithImage',
          dataUris: ProfileModel.dataArray,
          fields: ProfileModel.form
        }, 'PUT')
          .then(function profileUpdateSuccess(dataWrapper) {
            var user = dataWrapper.data;
            setAppStorageValues(user);
            return Message.alert('프로필 업데이트 알림', '업데이트가 성공적으로 되었습니다');
          })
          .then(function response() {
            $state.go('main.home');
          })
          .catch(function error(err) {
            Message.hide();
            console.log(err);
            Message.alert('프로필 업데이트 알림', '업데이트가 실패하였습니다, 나중에 다시 해주세요.');
          });
      }
    } // update ends

    function getPicture(from) {
      if (ProfileModel.fileArray.length > 0 || ProfileModel.dataArray.length > 0) {
        return Message.alert('사진 고르기 알림', '이미 사진을 고르셨습니다.');
      }
      return ImageService.get({
        from: from,
        fileUris: ProfileModel.fileArray,
        dataUris: ProfileModel.dataArray
      });
    }

    function onBeforeEnter() {
      var form = ProfileModel.form;
      form.nickname = appStorage.user.nickname;
      form.phone = Number(appStorage.user.phone);
    }
    //====================================================
    //  Helper
    //====================================================
    function setAppStorageValues(user) {
      appStorage.user.profile_picture = user.profile_picture && user.profile_picture.url || user.profile_image;
      appStorage.user.nickname = user.nickname;
      appStorage.user.phone = user.phone;
    }

    function reset() {
      ProfileModel.form = {
        profile_picture: null,
        nickname: null
      };
      ProfileModel.fileArray = [];
      ProfileModel.dataArray = [];
    }

    function goBack() {
      reset();
      return $rootScope.goBack();
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ProfileModel', ProfileModel);

  ProfileModel.$inject = [];

  function ProfileModel() {

    var model = {
      form: {},
      fileArray: [],
      dataArray: []

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('SignupController', SignupController);

  SignupController.$inject = ['SignupModel', 'Message', 'Users', '$state'];

  function SignupController(SignupModel, Message, Users, $state) {

    var Signup = this;
    Signup.Model = SignupModel;

    Signup.handleSignup = handleSignup;
    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function handleSignup() {
      console.log(SignupModel.form.password, SignupModel.passwordConfirm);
      if (SignupModel.form.password !== SignupModel.passwordConfirm) {
        return Message.alert('비밀번호 알림', '비밀번호를 다시 한번 확인해주시고 입력해주세요');
      }
      Users.register({}, SignupModel.form).$promise
        .then(function success(data) {
          console.log(data);
          Message.alert('회원가입 성공', '회원가입을 성공하였습니다.')
            .then(function() {
              reset();
              $state.go('main.login');
            });
        }, function error(err) {
          console.log(err);
          Message.hide();
          Message.alert('가입실패', '다시 입력해주세요')
            .then(function() {
              reset();
            });
        });
    }

    //====================================================
    //  Help
    //====================================================
    function reset() {
      var resetObj = {
        email: null,
        password: null
      };
      angular.copy(resetObj, SignupModel.form);
    }
  } // end factory function
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('SignupModel', SignupModel);

  SignupModel.$inject = [];

  function SignupModel() {

    var model = {
      form: {
        email: null,
        password: null,
      },
      agree: false,
      private: false
    };
    return model;
  }
})();
